-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity trace_cntrl_64 is
generic (
    C_S_AXI_TRACE_CNTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_TRACE_CNTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    trace_64_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    trace_64_TVALID : IN STD_LOGIC;
    trace_64_TREADY : OUT STD_LOGIC;
    trace_64_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    trace_64_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    trace_64_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    trace_64_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    trace_64_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    trace_64_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    capture_64_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    capture_64_TVALID : OUT STD_LOGIC;
    capture_64_TREADY : IN STD_LOGIC;
    capture_64_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    capture_64_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    capture_64_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    capture_64_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    capture_64_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    capture_64_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_trace_cntrl_AWVALID : IN STD_LOGIC;
    s_axi_trace_cntrl_AWREADY : OUT STD_LOGIC;
    s_axi_trace_cntrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TRACE_CNTRL_ADDR_WIDTH-1 downto 0);
    s_axi_trace_cntrl_WVALID : IN STD_LOGIC;
    s_axi_trace_cntrl_WREADY : OUT STD_LOGIC;
    s_axi_trace_cntrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_TRACE_CNTRL_DATA_WIDTH-1 downto 0);
    s_axi_trace_cntrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_TRACE_CNTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_trace_cntrl_ARVALID : IN STD_LOGIC;
    s_axi_trace_cntrl_ARREADY : OUT STD_LOGIC;
    s_axi_trace_cntrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TRACE_CNTRL_ADDR_WIDTH-1 downto 0);
    s_axi_trace_cntrl_RVALID : OUT STD_LOGIC;
    s_axi_trace_cntrl_RREADY : IN STD_LOGIC;
    s_axi_trace_cntrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_TRACE_CNTRL_DATA_WIDTH-1 downto 0);
    s_axi_trace_cntrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_trace_cntrl_BVALID : OUT STD_LOGIC;
    s_axi_trace_cntrl_BREADY : IN STD_LOGIC;
    s_axi_trace_cntrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of trace_cntrl_64 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "trace_cntrl_64,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.873000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=849,HLS_SYN_LUT=1350}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal trace_64_data_V_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal trace_64_data_V_0_vld_in : STD_LOGIC;
    signal trace_64_data_V_0_vld_out : STD_LOGIC;
    signal trace_64_data_V_0_ack_in : STD_LOGIC;
    signal trace_64_data_V_0_ack_out : STD_LOGIC;
    signal trace_64_data_V_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal trace_64_data_V_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal trace_64_data_V_0_sel_rd : STD_LOGIC := '0';
    signal trace_64_data_V_0_sel_wr : STD_LOGIC := '0';
    signal trace_64_data_V_0_sel : STD_LOGIC;
    signal trace_64_data_V_0_load_A : STD_LOGIC;
    signal trace_64_data_V_0_load_B : STD_LOGIC;
    signal trace_64_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal trace_64_data_V_0_state_cmp_full : STD_LOGIC;
    signal trace_64_keep_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal trace_64_keep_V_0_vld_in : STD_LOGIC;
    signal trace_64_keep_V_0_vld_out : STD_LOGIC;
    signal trace_64_keep_V_0_ack_in : STD_LOGIC;
    signal trace_64_keep_V_0_ack_out : STD_LOGIC;
    signal trace_64_keep_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal trace_64_keep_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal trace_64_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal trace_64_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal trace_64_keep_V_0_sel : STD_LOGIC;
    signal trace_64_keep_V_0_load_A : STD_LOGIC;
    signal trace_64_keep_V_0_load_B : STD_LOGIC;
    signal trace_64_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal trace_64_keep_V_0_state_cmp_full : STD_LOGIC;
    signal trace_64_strb_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal trace_64_strb_V_0_vld_in : STD_LOGIC;
    signal trace_64_strb_V_0_vld_out : STD_LOGIC;
    signal trace_64_strb_V_0_ack_in : STD_LOGIC;
    signal trace_64_strb_V_0_ack_out : STD_LOGIC;
    signal trace_64_strb_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal trace_64_strb_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal trace_64_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal trace_64_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal trace_64_strb_V_0_sel : STD_LOGIC;
    signal trace_64_strb_V_0_load_A : STD_LOGIC;
    signal trace_64_strb_V_0_load_B : STD_LOGIC;
    signal trace_64_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal trace_64_strb_V_0_state_cmp_full : STD_LOGIC;
    signal trace_64_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal trace_64_user_V_0_vld_in : STD_LOGIC;
    signal trace_64_user_V_0_vld_out : STD_LOGIC;
    signal trace_64_user_V_0_ack_in : STD_LOGIC;
    signal trace_64_user_V_0_ack_out : STD_LOGIC;
    signal trace_64_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal trace_64_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal trace_64_user_V_0_sel_rd : STD_LOGIC := '0';
    signal trace_64_user_V_0_sel_wr : STD_LOGIC := '0';
    signal trace_64_user_V_0_sel : STD_LOGIC;
    signal trace_64_user_V_0_load_A : STD_LOGIC;
    signal trace_64_user_V_0_load_B : STD_LOGIC;
    signal trace_64_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal trace_64_user_V_0_state_cmp_full : STD_LOGIC;
    signal trace_64_id_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal trace_64_id_V_0_vld_in : STD_LOGIC;
    signal trace_64_id_V_0_vld_out : STD_LOGIC;
    signal trace_64_id_V_0_ack_in : STD_LOGIC;
    signal trace_64_id_V_0_ack_out : STD_LOGIC;
    signal trace_64_id_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal trace_64_id_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal trace_64_id_V_0_sel_rd : STD_LOGIC := '0';
    signal trace_64_id_V_0_sel_wr : STD_LOGIC := '0';
    signal trace_64_id_V_0_sel : STD_LOGIC;
    signal trace_64_id_V_0_load_A : STD_LOGIC;
    signal trace_64_id_V_0_load_B : STD_LOGIC;
    signal trace_64_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal trace_64_id_V_0_state_cmp_full : STD_LOGIC;
    signal trace_64_dest_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal trace_64_dest_V_0_vld_in : STD_LOGIC;
    signal trace_64_dest_V_0_vld_out : STD_LOGIC;
    signal trace_64_dest_V_0_ack_in : STD_LOGIC;
    signal trace_64_dest_V_0_ack_out : STD_LOGIC;
    signal trace_64_dest_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal trace_64_dest_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal trace_64_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal trace_64_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal trace_64_dest_V_0_sel : STD_LOGIC;
    signal trace_64_dest_V_0_load_A : STD_LOGIC;
    signal trace_64_dest_V_0_load_B : STD_LOGIC;
    signal trace_64_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal trace_64_dest_V_0_state_cmp_full : STD_LOGIC;
    signal capture_64_data_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal capture_64_data_V_1_vld_in : STD_LOGIC;
    signal capture_64_data_V_1_vld_out : STD_LOGIC;
    signal capture_64_data_V_1_ack_in : STD_LOGIC;
    signal capture_64_data_V_1_ack_out : STD_LOGIC;
    signal capture_64_data_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal capture_64_data_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal capture_64_data_V_1_sel_rd : STD_LOGIC := '0';
    signal capture_64_data_V_1_sel_wr : STD_LOGIC := '0';
    signal capture_64_data_V_1_sel : STD_LOGIC;
    signal capture_64_data_V_1_load_A : STD_LOGIC;
    signal capture_64_data_V_1_load_B : STD_LOGIC;
    signal capture_64_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal capture_64_data_V_1_state_cmp_full : STD_LOGIC;
    signal capture_64_keep_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal capture_64_keep_V_1_vld_in : STD_LOGIC;
    signal capture_64_keep_V_1_vld_out : STD_LOGIC;
    signal capture_64_keep_V_1_ack_in : STD_LOGIC;
    signal capture_64_keep_V_1_ack_out : STD_LOGIC;
    signal capture_64_keep_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal capture_64_keep_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal capture_64_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal capture_64_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal capture_64_keep_V_1_sel : STD_LOGIC;
    signal capture_64_keep_V_1_load_A : STD_LOGIC;
    signal capture_64_keep_V_1_load_B : STD_LOGIC;
    signal capture_64_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal capture_64_keep_V_1_state_cmp_full : STD_LOGIC;
    signal capture_64_strb_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal capture_64_strb_V_1_vld_in : STD_LOGIC;
    signal capture_64_strb_V_1_vld_out : STD_LOGIC;
    signal capture_64_strb_V_1_ack_in : STD_LOGIC;
    signal capture_64_strb_V_1_ack_out : STD_LOGIC;
    signal capture_64_strb_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal capture_64_strb_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal capture_64_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal capture_64_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal capture_64_strb_V_1_sel : STD_LOGIC;
    signal capture_64_strb_V_1_load_A : STD_LOGIC;
    signal capture_64_strb_V_1_load_B : STD_LOGIC;
    signal capture_64_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal capture_64_strb_V_1_state_cmp_full : STD_LOGIC;
    signal capture_64_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal capture_64_user_V_1_vld_in : STD_LOGIC;
    signal capture_64_user_V_1_vld_out : STD_LOGIC;
    signal capture_64_user_V_1_ack_in : STD_LOGIC;
    signal capture_64_user_V_1_ack_out : STD_LOGIC;
    signal capture_64_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal capture_64_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal capture_64_user_V_1_sel_rd : STD_LOGIC := '0';
    signal capture_64_user_V_1_sel_wr : STD_LOGIC := '0';
    signal capture_64_user_V_1_sel : STD_LOGIC;
    signal capture_64_user_V_1_load_A : STD_LOGIC;
    signal capture_64_user_V_1_load_B : STD_LOGIC;
    signal capture_64_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal capture_64_user_V_1_state_cmp_full : STD_LOGIC;
    signal capture_64_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal capture_64_last_V_1_vld_in : STD_LOGIC;
    signal capture_64_last_V_1_vld_out : STD_LOGIC;
    signal capture_64_last_V_1_ack_in : STD_LOGIC;
    signal capture_64_last_V_1_ack_out : STD_LOGIC;
    signal capture_64_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal capture_64_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal capture_64_last_V_1_sel_rd : STD_LOGIC := '0';
    signal capture_64_last_V_1_sel_wr : STD_LOGIC := '0';
    signal capture_64_last_V_1_sel : STD_LOGIC;
    signal capture_64_last_V_1_load_A : STD_LOGIC;
    signal capture_64_last_V_1_load_B : STD_LOGIC;
    signal capture_64_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal capture_64_last_V_1_state_cmp_full : STD_LOGIC;
    signal capture_64_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal capture_64_id_V_1_vld_in : STD_LOGIC;
    signal capture_64_id_V_1_vld_out : STD_LOGIC;
    signal capture_64_id_V_1_ack_in : STD_LOGIC;
    signal capture_64_id_V_1_ack_out : STD_LOGIC;
    signal capture_64_id_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal capture_64_id_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal capture_64_id_V_1_sel_rd : STD_LOGIC := '0';
    signal capture_64_id_V_1_sel_wr : STD_LOGIC := '0';
    signal capture_64_id_V_1_sel : STD_LOGIC;
    signal capture_64_id_V_1_load_A : STD_LOGIC;
    signal capture_64_id_V_1_load_B : STD_LOGIC;
    signal capture_64_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal capture_64_id_V_1_state_cmp_full : STD_LOGIC;
    signal capture_64_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal capture_64_dest_V_1_vld_in : STD_LOGIC;
    signal capture_64_dest_V_1_vld_out : STD_LOGIC;
    signal capture_64_dest_V_1_ack_in : STD_LOGIC;
    signal capture_64_dest_V_1_ack_out : STD_LOGIC;
    signal capture_64_dest_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal capture_64_dest_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal capture_64_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal capture_64_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal capture_64_dest_V_1_sel : STD_LOGIC;
    signal capture_64_dest_V_1_load_A : STD_LOGIC;
    signal capture_64_dest_V_1_load_B : STD_LOGIC;
    signal capture_64_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal capture_64_dest_V_1_state_cmp_full : STD_LOGIC;
    signal trigger_V : STD_LOGIC_VECTOR (63 downto 0);
    signal length_r : STD_LOGIC_VECTOR (31 downto 0);
    signal trace_64_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_1_reg_288 : STD_LOGIC_VECTOR (0 downto 0);
    signal capture_64_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter1_tmp_1_reg_288 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_322 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter2_tmp_1_reg_288 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_7_reg_322 : STD_LOGIC_VECTOR (0 downto 0);
    signal match_reg_135 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_147 : STD_LOGIC_VECTOR (31 downto 0);
    signal length_read_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_169_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_predicate_op62_write_state4 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_predicate_op65_write_state5 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trace_temp_data_V_reg_292 : STD_LOGIC_VECTOR (63 downto 0);
    signal trace_temp_keep_V_reg_297 : STD_LOGIC_VECTOR (7 downto 0);
    signal trace_temp_strb_V_reg_302 : STD_LOGIC_VECTOR (7 downto 0);
    signal trace_temp_user_V_reg_307 : STD_LOGIC_VECTOR (0 downto 0);
    signal trace_temp_id_V_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal trace_temp_dest_V_reg_317 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trace_temp_last_V_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trace_temp_last_V_reg_327 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_match_phi_fu_139_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_i_phi_fu_151_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_1_phi_fu_162_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_i_1_reg_159 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal samples_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal samples_1_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_3_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_852 : BOOLEAN;

    component trace_cntrl_64_trace_cntrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        trigger_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        length_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    trace_cntrl_64_trace_cntrl_s_axi_U : component trace_cntrl_64_trace_cntrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_TRACE_CNTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_TRACE_CNTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_trace_cntrl_AWVALID,
        AWREADY => s_axi_trace_cntrl_AWREADY,
        AWADDR => s_axi_trace_cntrl_AWADDR,
        WVALID => s_axi_trace_cntrl_WVALID,
        WREADY => s_axi_trace_cntrl_WREADY,
        WDATA => s_axi_trace_cntrl_WDATA,
        WSTRB => s_axi_trace_cntrl_WSTRB,
        ARVALID => s_axi_trace_cntrl_ARVALID,
        ARREADY => s_axi_trace_cntrl_ARREADY,
        ARADDR => s_axi_trace_cntrl_ARADDR,
        RVALID => s_axi_trace_cntrl_RVALID,
        RREADY => s_axi_trace_cntrl_RREADY,
        RDATA => s_axi_trace_cntrl_RDATA,
        RRESP => s_axi_trace_cntrl_RRESP,
        BVALID => s_axi_trace_cntrl_BVALID,
        BREADY => s_axi_trace_cntrl_BREADY,
        BRESP => s_axi_trace_cntrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        trigger_V => trigger_V,
        length_r => length_r);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    capture_64_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((capture_64_data_V_1_ack_out = ap_const_logic_1) and (capture_64_data_V_1_vld_out = ap_const_logic_1))) then 
                                        capture_64_data_V_1_sel_rd <= not(capture_64_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    capture_64_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((capture_64_data_V_1_ack_in = ap_const_logic_1) and (capture_64_data_V_1_vld_in = ap_const_logic_1))) then 
                                        capture_64_data_V_1_sel_wr <= not(capture_64_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    capture_64_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((capture_64_data_V_1_state = ap_const_lv2_2) and (capture_64_data_V_1_vld_in = ap_const_logic_0)) or ((capture_64_data_V_1_state = ap_const_lv2_3) and (capture_64_data_V_1_vld_in = ap_const_logic_0) and (capture_64_data_V_1_ack_out = ap_const_logic_1)))) then 
                    capture_64_data_V_1_state <= ap_const_lv2_2;
                elsif ((((capture_64_data_V_1_state = ap_const_lv2_1) and (capture_64_data_V_1_ack_out = ap_const_logic_0)) or ((capture_64_data_V_1_state = ap_const_lv2_3) and (capture_64_data_V_1_ack_out = ap_const_logic_0) and (capture_64_data_V_1_vld_in = ap_const_logic_1)))) then 
                    capture_64_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((capture_64_data_V_1_vld_in = ap_const_logic_0) and (capture_64_data_V_1_ack_out = ap_const_logic_1))) and not(((capture_64_data_V_1_ack_out = ap_const_logic_0) and (capture_64_data_V_1_vld_in = ap_const_logic_1))) and (capture_64_data_V_1_state = ap_const_lv2_3)) or ((capture_64_data_V_1_state = ap_const_lv2_1) and (capture_64_data_V_1_ack_out = ap_const_logic_1)) or ((capture_64_data_V_1_state = ap_const_lv2_2) and (capture_64_data_V_1_vld_in = ap_const_logic_1)))) then 
                    capture_64_data_V_1_state <= ap_const_lv2_3;
                else 
                    capture_64_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    capture_64_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((capture_64_dest_V_1_ack_out = ap_const_logic_1) and (capture_64_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        capture_64_dest_V_1_sel_rd <= not(capture_64_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    capture_64_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((capture_64_dest_V_1_ack_in = ap_const_logic_1) and (capture_64_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        capture_64_dest_V_1_sel_wr <= not(capture_64_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    capture_64_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((capture_64_dest_V_1_state = ap_const_lv2_2) and (capture_64_dest_V_1_vld_in = ap_const_logic_0)) or ((capture_64_dest_V_1_state = ap_const_lv2_3) and (capture_64_dest_V_1_vld_in = ap_const_logic_0) and (capture_64_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    capture_64_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((capture_64_dest_V_1_state = ap_const_lv2_1) and (capture_64_dest_V_1_ack_out = ap_const_logic_0)) or ((capture_64_dest_V_1_state = ap_const_lv2_3) and (capture_64_dest_V_1_ack_out = ap_const_logic_0) and (capture_64_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    capture_64_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((capture_64_dest_V_1_vld_in = ap_const_logic_0) and (capture_64_dest_V_1_ack_out = ap_const_logic_1))) and not(((capture_64_dest_V_1_ack_out = ap_const_logic_0) and (capture_64_dest_V_1_vld_in = ap_const_logic_1))) and (capture_64_dest_V_1_state = ap_const_lv2_3)) or ((capture_64_dest_V_1_state = ap_const_lv2_1) and (capture_64_dest_V_1_ack_out = ap_const_logic_1)) or ((capture_64_dest_V_1_state = ap_const_lv2_2) and (capture_64_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    capture_64_dest_V_1_state <= ap_const_lv2_3;
                else 
                    capture_64_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    capture_64_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((capture_64_id_V_1_ack_out = ap_const_logic_1) and (capture_64_id_V_1_vld_out = ap_const_logic_1))) then 
                                        capture_64_id_V_1_sel_rd <= not(capture_64_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    capture_64_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((capture_64_id_V_1_ack_in = ap_const_logic_1) and (capture_64_id_V_1_vld_in = ap_const_logic_1))) then 
                                        capture_64_id_V_1_sel_wr <= not(capture_64_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    capture_64_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((capture_64_id_V_1_state = ap_const_lv2_2) and (capture_64_id_V_1_vld_in = ap_const_logic_0)) or ((capture_64_id_V_1_state = ap_const_lv2_3) and (capture_64_id_V_1_vld_in = ap_const_logic_0) and (capture_64_id_V_1_ack_out = ap_const_logic_1)))) then 
                    capture_64_id_V_1_state <= ap_const_lv2_2;
                elsif ((((capture_64_id_V_1_state = ap_const_lv2_1) and (capture_64_id_V_1_ack_out = ap_const_logic_0)) or ((capture_64_id_V_1_state = ap_const_lv2_3) and (capture_64_id_V_1_ack_out = ap_const_logic_0) and (capture_64_id_V_1_vld_in = ap_const_logic_1)))) then 
                    capture_64_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((capture_64_id_V_1_vld_in = ap_const_logic_0) and (capture_64_id_V_1_ack_out = ap_const_logic_1))) and not(((capture_64_id_V_1_ack_out = ap_const_logic_0) and (capture_64_id_V_1_vld_in = ap_const_logic_1))) and (capture_64_id_V_1_state = ap_const_lv2_3)) or ((capture_64_id_V_1_state = ap_const_lv2_1) and (capture_64_id_V_1_ack_out = ap_const_logic_1)) or ((capture_64_id_V_1_state = ap_const_lv2_2) and (capture_64_id_V_1_vld_in = ap_const_logic_1)))) then 
                    capture_64_id_V_1_state <= ap_const_lv2_3;
                else 
                    capture_64_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    capture_64_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((capture_64_keep_V_1_ack_out = ap_const_logic_1) and (capture_64_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        capture_64_keep_V_1_sel_rd <= not(capture_64_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    capture_64_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((capture_64_keep_V_1_ack_in = ap_const_logic_1) and (capture_64_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        capture_64_keep_V_1_sel_wr <= not(capture_64_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    capture_64_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((capture_64_keep_V_1_state = ap_const_lv2_2) and (capture_64_keep_V_1_vld_in = ap_const_logic_0)) or ((capture_64_keep_V_1_state = ap_const_lv2_3) and (capture_64_keep_V_1_vld_in = ap_const_logic_0) and (capture_64_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    capture_64_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((capture_64_keep_V_1_state = ap_const_lv2_1) and (capture_64_keep_V_1_ack_out = ap_const_logic_0)) or ((capture_64_keep_V_1_state = ap_const_lv2_3) and (capture_64_keep_V_1_ack_out = ap_const_logic_0) and (capture_64_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    capture_64_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((capture_64_keep_V_1_vld_in = ap_const_logic_0) and (capture_64_keep_V_1_ack_out = ap_const_logic_1))) and not(((capture_64_keep_V_1_ack_out = ap_const_logic_0) and (capture_64_keep_V_1_vld_in = ap_const_logic_1))) and (capture_64_keep_V_1_state = ap_const_lv2_3)) or ((capture_64_keep_V_1_state = ap_const_lv2_1) and (capture_64_keep_V_1_ack_out = ap_const_logic_1)) or ((capture_64_keep_V_1_state = ap_const_lv2_2) and (capture_64_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    capture_64_keep_V_1_state <= ap_const_lv2_3;
                else 
                    capture_64_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    capture_64_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((capture_64_last_V_1_ack_out = ap_const_logic_1) and (capture_64_last_V_1_vld_out = ap_const_logic_1))) then 
                                        capture_64_last_V_1_sel_rd <= not(capture_64_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    capture_64_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((capture_64_last_V_1_ack_in = ap_const_logic_1) and (capture_64_last_V_1_vld_in = ap_const_logic_1))) then 
                                        capture_64_last_V_1_sel_wr <= not(capture_64_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    capture_64_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((capture_64_last_V_1_state = ap_const_lv2_2) and (capture_64_last_V_1_vld_in = ap_const_logic_0)) or ((capture_64_last_V_1_state = ap_const_lv2_3) and (capture_64_last_V_1_vld_in = ap_const_logic_0) and (capture_64_last_V_1_ack_out = ap_const_logic_1)))) then 
                    capture_64_last_V_1_state <= ap_const_lv2_2;
                elsif ((((capture_64_last_V_1_state = ap_const_lv2_1) and (capture_64_last_V_1_ack_out = ap_const_logic_0)) or ((capture_64_last_V_1_state = ap_const_lv2_3) and (capture_64_last_V_1_ack_out = ap_const_logic_0) and (capture_64_last_V_1_vld_in = ap_const_logic_1)))) then 
                    capture_64_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((capture_64_last_V_1_vld_in = ap_const_logic_0) and (capture_64_last_V_1_ack_out = ap_const_logic_1))) and not(((capture_64_last_V_1_ack_out = ap_const_logic_0) and (capture_64_last_V_1_vld_in = ap_const_logic_1))) and (capture_64_last_V_1_state = ap_const_lv2_3)) or ((capture_64_last_V_1_state = ap_const_lv2_1) and (capture_64_last_V_1_ack_out = ap_const_logic_1)) or ((capture_64_last_V_1_state = ap_const_lv2_2) and (capture_64_last_V_1_vld_in = ap_const_logic_1)))) then 
                    capture_64_last_V_1_state <= ap_const_lv2_3;
                else 
                    capture_64_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    capture_64_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((capture_64_strb_V_1_ack_out = ap_const_logic_1) and (capture_64_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        capture_64_strb_V_1_sel_rd <= not(capture_64_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    capture_64_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((capture_64_strb_V_1_ack_in = ap_const_logic_1) and (capture_64_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        capture_64_strb_V_1_sel_wr <= not(capture_64_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    capture_64_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((capture_64_strb_V_1_state = ap_const_lv2_2) and (capture_64_strb_V_1_vld_in = ap_const_logic_0)) or ((capture_64_strb_V_1_state = ap_const_lv2_3) and (capture_64_strb_V_1_vld_in = ap_const_logic_0) and (capture_64_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    capture_64_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((capture_64_strb_V_1_state = ap_const_lv2_1) and (capture_64_strb_V_1_ack_out = ap_const_logic_0)) or ((capture_64_strb_V_1_state = ap_const_lv2_3) and (capture_64_strb_V_1_ack_out = ap_const_logic_0) and (capture_64_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    capture_64_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((capture_64_strb_V_1_vld_in = ap_const_logic_0) and (capture_64_strb_V_1_ack_out = ap_const_logic_1))) and not(((capture_64_strb_V_1_ack_out = ap_const_logic_0) and (capture_64_strb_V_1_vld_in = ap_const_logic_1))) and (capture_64_strb_V_1_state = ap_const_lv2_3)) or ((capture_64_strb_V_1_state = ap_const_lv2_1) and (capture_64_strb_V_1_ack_out = ap_const_logic_1)) or ((capture_64_strb_V_1_state = ap_const_lv2_2) and (capture_64_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    capture_64_strb_V_1_state <= ap_const_lv2_3;
                else 
                    capture_64_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    capture_64_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((capture_64_user_V_1_ack_out = ap_const_logic_1) and (capture_64_user_V_1_vld_out = ap_const_logic_1))) then 
                                        capture_64_user_V_1_sel_rd <= not(capture_64_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    capture_64_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((capture_64_user_V_1_ack_in = ap_const_logic_1) and (capture_64_user_V_1_vld_in = ap_const_logic_1))) then 
                                        capture_64_user_V_1_sel_wr <= not(capture_64_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    capture_64_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                capture_64_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((capture_64_user_V_1_state = ap_const_lv2_2) and (capture_64_user_V_1_vld_in = ap_const_logic_0)) or ((capture_64_user_V_1_state = ap_const_lv2_3) and (capture_64_user_V_1_vld_in = ap_const_logic_0) and (capture_64_user_V_1_ack_out = ap_const_logic_1)))) then 
                    capture_64_user_V_1_state <= ap_const_lv2_2;
                elsif ((((capture_64_user_V_1_state = ap_const_lv2_1) and (capture_64_user_V_1_ack_out = ap_const_logic_0)) or ((capture_64_user_V_1_state = ap_const_lv2_3) and (capture_64_user_V_1_ack_out = ap_const_logic_0) and (capture_64_user_V_1_vld_in = ap_const_logic_1)))) then 
                    capture_64_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((capture_64_user_V_1_vld_in = ap_const_logic_0) and (capture_64_user_V_1_ack_out = ap_const_logic_1))) and not(((capture_64_user_V_1_ack_out = ap_const_logic_0) and (capture_64_user_V_1_vld_in = ap_const_logic_1))) and (capture_64_user_V_1_state = ap_const_lv2_3)) or ((capture_64_user_V_1_state = ap_const_lv2_1) and (capture_64_user_V_1_ack_out = ap_const_logic_1)) or ((capture_64_user_V_1_state = ap_const_lv2_2) and (capture_64_user_V_1_vld_in = ap_const_logic_1)))) then 
                    capture_64_user_V_1_state <= ap_const_lv2_3;
                else 
                    capture_64_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    trace_64_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                trace_64_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((trace_64_data_V_0_ack_out = ap_const_logic_1) and (trace_64_data_V_0_vld_out = ap_const_logic_1))) then 
                                        trace_64_data_V_0_sel_rd <= not(trace_64_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    trace_64_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                trace_64_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((trace_64_data_V_0_ack_in = ap_const_logic_1) and (trace_64_data_V_0_vld_in = ap_const_logic_1))) then 
                                        trace_64_data_V_0_sel_wr <= not(trace_64_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    trace_64_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                trace_64_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((trace_64_data_V_0_state = ap_const_lv2_2) and (trace_64_data_V_0_vld_in = ap_const_logic_0)) or ((trace_64_data_V_0_state = ap_const_lv2_3) and (trace_64_data_V_0_vld_in = ap_const_logic_0) and (trace_64_data_V_0_ack_out = ap_const_logic_1)))) then 
                    trace_64_data_V_0_state <= ap_const_lv2_2;
                elsif ((((trace_64_data_V_0_state = ap_const_lv2_1) and (trace_64_data_V_0_ack_out = ap_const_logic_0)) or ((trace_64_data_V_0_state = ap_const_lv2_3) and (trace_64_data_V_0_ack_out = ap_const_logic_0) and (trace_64_data_V_0_vld_in = ap_const_logic_1)))) then 
                    trace_64_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((trace_64_data_V_0_vld_in = ap_const_logic_0) and (trace_64_data_V_0_ack_out = ap_const_logic_1))) and not(((trace_64_data_V_0_ack_out = ap_const_logic_0) and (trace_64_data_V_0_vld_in = ap_const_logic_1))) and (trace_64_data_V_0_state = ap_const_lv2_3)) or ((trace_64_data_V_0_state = ap_const_lv2_1) and (trace_64_data_V_0_ack_out = ap_const_logic_1)) or ((trace_64_data_V_0_state = ap_const_lv2_2) and (trace_64_data_V_0_vld_in = ap_const_logic_1)))) then 
                    trace_64_data_V_0_state <= ap_const_lv2_3;
                else 
                    trace_64_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    trace_64_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                trace_64_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((trace_64_dest_V_0_ack_out = ap_const_logic_1) and (trace_64_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        trace_64_dest_V_0_sel_rd <= not(trace_64_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    trace_64_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                trace_64_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((trace_64_dest_V_0_ack_in = ap_const_logic_1) and (trace_64_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        trace_64_dest_V_0_sel_wr <= not(trace_64_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    trace_64_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                trace_64_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((trace_64_dest_V_0_state = ap_const_lv2_2) and (trace_64_dest_V_0_vld_in = ap_const_logic_0)) or ((trace_64_dest_V_0_state = ap_const_lv2_3) and (trace_64_dest_V_0_vld_in = ap_const_logic_0) and (trace_64_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    trace_64_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((trace_64_dest_V_0_state = ap_const_lv2_1) and (trace_64_dest_V_0_ack_out = ap_const_logic_0)) or ((trace_64_dest_V_0_state = ap_const_lv2_3) and (trace_64_dest_V_0_ack_out = ap_const_logic_0) and (trace_64_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    trace_64_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((trace_64_dest_V_0_vld_in = ap_const_logic_0) and (trace_64_dest_V_0_ack_out = ap_const_logic_1))) and not(((trace_64_dest_V_0_ack_out = ap_const_logic_0) and (trace_64_dest_V_0_vld_in = ap_const_logic_1))) and (trace_64_dest_V_0_state = ap_const_lv2_3)) or ((trace_64_dest_V_0_state = ap_const_lv2_1) and (trace_64_dest_V_0_ack_out = ap_const_logic_1)) or ((trace_64_dest_V_0_state = ap_const_lv2_2) and (trace_64_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    trace_64_dest_V_0_state <= ap_const_lv2_3;
                else 
                    trace_64_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    trace_64_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                trace_64_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((trace_64_id_V_0_ack_out = ap_const_logic_1) and (trace_64_id_V_0_vld_out = ap_const_logic_1))) then 
                                        trace_64_id_V_0_sel_rd <= not(trace_64_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    trace_64_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                trace_64_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((trace_64_id_V_0_ack_in = ap_const_logic_1) and (trace_64_id_V_0_vld_in = ap_const_logic_1))) then 
                                        trace_64_id_V_0_sel_wr <= not(trace_64_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    trace_64_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                trace_64_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((trace_64_id_V_0_state = ap_const_lv2_2) and (trace_64_id_V_0_vld_in = ap_const_logic_0)) or ((trace_64_id_V_0_state = ap_const_lv2_3) and (trace_64_id_V_0_vld_in = ap_const_logic_0) and (trace_64_id_V_0_ack_out = ap_const_logic_1)))) then 
                    trace_64_id_V_0_state <= ap_const_lv2_2;
                elsif ((((trace_64_id_V_0_state = ap_const_lv2_1) and (trace_64_id_V_0_ack_out = ap_const_logic_0)) or ((trace_64_id_V_0_state = ap_const_lv2_3) and (trace_64_id_V_0_ack_out = ap_const_logic_0) and (trace_64_id_V_0_vld_in = ap_const_logic_1)))) then 
                    trace_64_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((trace_64_id_V_0_vld_in = ap_const_logic_0) and (trace_64_id_V_0_ack_out = ap_const_logic_1))) and not(((trace_64_id_V_0_ack_out = ap_const_logic_0) and (trace_64_id_V_0_vld_in = ap_const_logic_1))) and (trace_64_id_V_0_state = ap_const_lv2_3)) or ((trace_64_id_V_0_state = ap_const_lv2_1) and (trace_64_id_V_0_ack_out = ap_const_logic_1)) or ((trace_64_id_V_0_state = ap_const_lv2_2) and (trace_64_id_V_0_vld_in = ap_const_logic_1)))) then 
                    trace_64_id_V_0_state <= ap_const_lv2_3;
                else 
                    trace_64_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    trace_64_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                trace_64_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((trace_64_keep_V_0_ack_out = ap_const_logic_1) and (trace_64_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        trace_64_keep_V_0_sel_rd <= not(trace_64_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    trace_64_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                trace_64_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((trace_64_keep_V_0_ack_in = ap_const_logic_1) and (trace_64_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        trace_64_keep_V_0_sel_wr <= not(trace_64_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    trace_64_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                trace_64_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((trace_64_keep_V_0_state = ap_const_lv2_2) and (trace_64_keep_V_0_vld_in = ap_const_logic_0)) or ((trace_64_keep_V_0_state = ap_const_lv2_3) and (trace_64_keep_V_0_vld_in = ap_const_logic_0) and (trace_64_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    trace_64_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((trace_64_keep_V_0_state = ap_const_lv2_1) and (trace_64_keep_V_0_ack_out = ap_const_logic_0)) or ((trace_64_keep_V_0_state = ap_const_lv2_3) and (trace_64_keep_V_0_ack_out = ap_const_logic_0) and (trace_64_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    trace_64_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((trace_64_keep_V_0_vld_in = ap_const_logic_0) and (trace_64_keep_V_0_ack_out = ap_const_logic_1))) and not(((trace_64_keep_V_0_ack_out = ap_const_logic_0) and (trace_64_keep_V_0_vld_in = ap_const_logic_1))) and (trace_64_keep_V_0_state = ap_const_lv2_3)) or ((trace_64_keep_V_0_state = ap_const_lv2_1) and (trace_64_keep_V_0_ack_out = ap_const_logic_1)) or ((trace_64_keep_V_0_state = ap_const_lv2_2) and (trace_64_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    trace_64_keep_V_0_state <= ap_const_lv2_3;
                else 
                    trace_64_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    trace_64_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                trace_64_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((trace_64_strb_V_0_ack_out = ap_const_logic_1) and (trace_64_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        trace_64_strb_V_0_sel_rd <= not(trace_64_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    trace_64_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                trace_64_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((trace_64_strb_V_0_ack_in = ap_const_logic_1) and (trace_64_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        trace_64_strb_V_0_sel_wr <= not(trace_64_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    trace_64_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                trace_64_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((trace_64_strb_V_0_state = ap_const_lv2_2) and (trace_64_strb_V_0_vld_in = ap_const_logic_0)) or ((trace_64_strb_V_0_state = ap_const_lv2_3) and (trace_64_strb_V_0_vld_in = ap_const_logic_0) and (trace_64_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    trace_64_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((trace_64_strb_V_0_state = ap_const_lv2_1) and (trace_64_strb_V_0_ack_out = ap_const_logic_0)) or ((trace_64_strb_V_0_state = ap_const_lv2_3) and (trace_64_strb_V_0_ack_out = ap_const_logic_0) and (trace_64_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    trace_64_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((trace_64_strb_V_0_vld_in = ap_const_logic_0) and (trace_64_strb_V_0_ack_out = ap_const_logic_1))) and not(((trace_64_strb_V_0_ack_out = ap_const_logic_0) and (trace_64_strb_V_0_vld_in = ap_const_logic_1))) and (trace_64_strb_V_0_state = ap_const_lv2_3)) or ((trace_64_strb_V_0_state = ap_const_lv2_1) and (trace_64_strb_V_0_ack_out = ap_const_logic_1)) or ((trace_64_strb_V_0_state = ap_const_lv2_2) and (trace_64_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    trace_64_strb_V_0_state <= ap_const_lv2_3;
                else 
                    trace_64_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    trace_64_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                trace_64_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((trace_64_user_V_0_ack_out = ap_const_logic_1) and (trace_64_user_V_0_vld_out = ap_const_logic_1))) then 
                                        trace_64_user_V_0_sel_rd <= not(trace_64_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    trace_64_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                trace_64_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((trace_64_user_V_0_ack_in = ap_const_logic_1) and (trace_64_user_V_0_vld_in = ap_const_logic_1))) then 
                                        trace_64_user_V_0_sel_wr <= not(trace_64_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    trace_64_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                trace_64_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((trace_64_user_V_0_state = ap_const_lv2_2) and (trace_64_user_V_0_vld_in = ap_const_logic_0)) or ((trace_64_user_V_0_state = ap_const_lv2_3) and (trace_64_user_V_0_vld_in = ap_const_logic_0) and (trace_64_user_V_0_ack_out = ap_const_logic_1)))) then 
                    trace_64_user_V_0_state <= ap_const_lv2_2;
                elsif ((((trace_64_user_V_0_state = ap_const_lv2_1) and (trace_64_user_V_0_ack_out = ap_const_logic_0)) or ((trace_64_user_V_0_state = ap_const_lv2_3) and (trace_64_user_V_0_ack_out = ap_const_logic_0) and (trace_64_user_V_0_vld_in = ap_const_logic_1)))) then 
                    trace_64_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((trace_64_user_V_0_vld_in = ap_const_logic_0) and (trace_64_user_V_0_ack_out = ap_const_logic_1))) and not(((trace_64_user_V_0_ack_out = ap_const_logic_0) and (trace_64_user_V_0_vld_in = ap_const_logic_1))) and (trace_64_user_V_0_state = ap_const_lv2_3)) or ((trace_64_user_V_0_state = ap_const_lv2_1) and (trace_64_user_V_0_ack_out = ap_const_logic_1)) or ((trace_64_user_V_0_state = ap_const_lv2_2) and (trace_64_user_V_0_vld_in = ap_const_logic_1)))) then 
                    trace_64_user_V_0_state <= ap_const_lv2_3;
                else 
                    trace_64_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_1_reg_288 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_147 <= i_3_fu_259_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_147 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    match_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter1_tmp_1_reg_288 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                match_reg_135 <= tmp_7_reg_322;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                match_reg_135 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    samples_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_7_fu_227_p2 = ap_const_lv1_1) and (tmp_1_reg_288 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                samples_fu_76 <= samples_1_fu_248_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                samples_fu_76 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_tmp_1_reg_288 <= tmp_1_reg_288;
                tmp_1_reg_288 <= tmp_1_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter2_tmp_1_reg_288 <= ap_reg_pp0_iter1_tmp_1_reg_288;
                ap_reg_pp0_iter2_tmp_7_reg_322 <= tmp_7_reg_322;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((capture_64_data_V_1_load_A = ap_const_logic_1)) then
                capture_64_data_V_1_payload_A <= trace_temp_data_V_reg_292;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((capture_64_data_V_1_load_B = ap_const_logic_1)) then
                capture_64_data_V_1_payload_B <= trace_temp_data_V_reg_292;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((capture_64_dest_V_1_load_A = ap_const_logic_1)) then
                capture_64_dest_V_1_payload_A <= trace_temp_dest_V_reg_317;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((capture_64_dest_V_1_load_B = ap_const_logic_1)) then
                capture_64_dest_V_1_payload_B <= trace_temp_dest_V_reg_317;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((capture_64_id_V_1_load_A = ap_const_logic_1)) then
                capture_64_id_V_1_payload_A <= trace_temp_id_V_reg_312;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((capture_64_id_V_1_load_B = ap_const_logic_1)) then
                capture_64_id_V_1_payload_B <= trace_temp_id_V_reg_312;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((capture_64_keep_V_1_load_A = ap_const_logic_1)) then
                capture_64_keep_V_1_payload_A <= trace_temp_keep_V_reg_297;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((capture_64_keep_V_1_load_B = ap_const_logic_1)) then
                capture_64_keep_V_1_payload_B <= trace_temp_keep_V_reg_297;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((capture_64_last_V_1_load_A = ap_const_logic_1)) then
                capture_64_last_V_1_payload_A <= trace_temp_last_V_reg_327;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((capture_64_last_V_1_load_B = ap_const_logic_1)) then
                capture_64_last_V_1_payload_B <= trace_temp_last_V_reg_327;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((capture_64_strb_V_1_load_A = ap_const_logic_1)) then
                capture_64_strb_V_1_payload_A <= trace_temp_strb_V_reg_302;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((capture_64_strb_V_1_load_B = ap_const_logic_1)) then
                capture_64_strb_V_1_payload_B <= trace_temp_strb_V_reg_302;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((capture_64_user_V_1_load_A = ap_const_logic_1)) then
                capture_64_user_V_1_payload_A <= trace_temp_user_V_reg_307;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((capture_64_user_V_1_load_B = ap_const_logic_1)) then
                capture_64_user_V_1_payload_B <= trace_temp_user_V_reg_307;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                length_read_reg_272 <= length_r;
                tmp_2_reg_282 <= tmp_2_fu_175_p1;
                tmp_reg_277 <= tmp_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_1_reg_288 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_7_reg_322 <= tmp_7_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((trace_64_data_V_0_load_A = ap_const_logic_1)) then
                trace_64_data_V_0_payload_A <= trace_64_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((trace_64_data_V_0_load_B = ap_const_logic_1)) then
                trace_64_data_V_0_payload_B <= trace_64_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((trace_64_dest_V_0_load_A = ap_const_logic_1)) then
                trace_64_dest_V_0_payload_A <= trace_64_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((trace_64_dest_V_0_load_B = ap_const_logic_1)) then
                trace_64_dest_V_0_payload_B <= trace_64_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((trace_64_id_V_0_load_A = ap_const_logic_1)) then
                trace_64_id_V_0_payload_A <= trace_64_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((trace_64_id_V_0_load_B = ap_const_logic_1)) then
                trace_64_id_V_0_payload_B <= trace_64_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((trace_64_keep_V_0_load_A = ap_const_logic_1)) then
                trace_64_keep_V_0_payload_A <= trace_64_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((trace_64_keep_V_0_load_B = ap_const_logic_1)) then
                trace_64_keep_V_0_payload_B <= trace_64_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((trace_64_strb_V_0_load_A = ap_const_logic_1)) then
                trace_64_strb_V_0_payload_A <= trace_64_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((trace_64_strb_V_0_load_B = ap_const_logic_1)) then
                trace_64_strb_V_0_payload_B <= trace_64_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((trace_64_user_V_0_load_A = ap_const_logic_1)) then
                trace_64_user_V_0_payload_A <= trace_64_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((trace_64_user_V_0_load_B = ap_const_logic_1)) then
                trace_64_user_V_0_payload_B <= trace_64_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_1_reg_288 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trace_temp_data_V_reg_292 <= trace_64_data_V_0_data_out;
                trace_temp_dest_V_reg_317 <= trace_64_dest_V_0_data_out;
                trace_temp_id_V_reg_312 <= trace_64_id_V_0_data_out;
                trace_temp_keep_V_reg_297 <= trace_64_keep_V_0_data_out;
                trace_temp_strb_V_reg_302 <= trace_64_strb_V_0_data_out;
                trace_temp_user_V_reg_307 <= trace_64_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_7_fu_227_p2 = ap_const_lv1_1) and (tmp_1_reg_288 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trace_temp_last_V_reg_327 <= trace_temp_last_V_fu_243_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, capture_64_data_V_1_ack_in, capture_64_keep_V_1_ack_in, capture_64_strb_V_1_ack_in, capture_64_user_V_1_ack_in, capture_64_last_V_1_ack_in, capture_64_id_V_1_ack_in, capture_64_dest_V_1_ack_in, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, tmp_1_fu_184_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (tmp_1_fu_184_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (tmp_1_fu_184_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((capture_64_dest_V_1_ack_in = ap_const_logic_0) or (capture_64_id_V_1_ack_in = ap_const_logic_0) or (capture_64_last_V_1_ack_in = ap_const_logic_0) or (capture_64_user_V_1_ack_in = ap_const_logic_0) or (capture_64_strb_V_1_ack_in = ap_const_logic_0) or (capture_64_keep_V_1_ack_in = ap_const_logic_0) or (capture_64_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(trace_64_data_V_0_vld_out, ap_enable_reg_pp0_iter1, tmp_1_reg_288)
    begin
                ap_block_pp0_stage0_01001 <= ((tmp_1_reg_288 = ap_const_lv1_1) and (trace_64_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(trace_64_data_V_0_vld_out, ap_enable_reg_pp0_iter1, tmp_1_reg_288, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((tmp_1_reg_288 = ap_const_lv1_1) and (trace_64_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(trace_64_data_V_0_vld_out, ap_enable_reg_pp0_iter1, tmp_1_reg_288, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((tmp_1_reg_288 = ap_const_lv1_1) and (trace_64_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(trace_64_data_V_0_vld_out, tmp_1_reg_288)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((tmp_1_reg_288 = ap_const_lv1_1) and (trace_64_data_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(capture_64_data_V_1_ack_in, ap_predicate_op62_write_state4)
    begin
                ap_block_state4_io <= ((capture_64_data_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op62_write_state4 = ap_const_boolean_1));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(capture_64_data_V_1_ack_in, ap_predicate_op65_write_state5)
    begin
                ap_block_state5_io <= ((capture_64_data_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op65_write_state5 = ap_const_boolean_1));
    end process;

        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_assign_proc : process(capture_64_data_V_1_ack_in, capture_64_keep_V_1_ack_in, capture_64_strb_V_1_ack_in, capture_64_user_V_1_ack_in, capture_64_last_V_1_ack_in, capture_64_id_V_1_ack_in, capture_64_dest_V_1_ack_in)
    begin
                ap_block_state6 <= ((capture_64_dest_V_1_ack_in = ap_const_logic_0) or (capture_64_id_V_1_ack_in = ap_const_logic_0) or (capture_64_last_V_1_ack_in = ap_const_logic_0) or (capture_64_user_V_1_ack_in = ap_const_logic_0) or (capture_64_strb_V_1_ack_in = ap_const_logic_0) or (capture_64_keep_V_1_ack_in = ap_const_logic_0) or (capture_64_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_852_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_1_reg_288)
    begin
                ap_condition_852 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_1_reg_288 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_1_fu_184_p2)
    begin
        if ((tmp_1_fu_184_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(capture_64_data_V_1_ack_in, capture_64_keep_V_1_ack_in, capture_64_strb_V_1_ack_in, capture_64_user_V_1_ack_in, capture_64_last_V_1_ack_in, capture_64_id_V_1_ack_in, capture_64_dest_V_1_ack_in, ap_CS_fsm_state6)
    begin
        if ((not(((capture_64_dest_V_1_ack_in = ap_const_logic_0) or (capture_64_id_V_1_ack_in = ap_const_logic_0) or (capture_64_last_V_1_ack_in = ap_const_logic_0) or (capture_64_user_V_1_ack_in = ap_const_logic_0) or (capture_64_strb_V_1_ack_in = ap_const_logic_0) or (capture_64_keep_V_1_ack_in = ap_const_logic_0) or (capture_64_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_162_p4_assign_proc : process(i_reg_147, tmp_7_fu_227_p2, ap_phi_reg_pp0_iter1_i_1_reg_159, i_2_fu_233_p2, ap_condition_852)
    begin
        if ((ap_const_boolean_1 = ap_condition_852)) then
            if ((tmp_7_fu_227_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_i_1_phi_fu_162_p4 <= i_2_fu_233_p2;
            elsif ((tmp_7_fu_227_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_i_1_phi_fu_162_p4 <= i_reg_147;
            else 
                ap_phi_mux_i_1_phi_fu_162_p4 <= ap_phi_reg_pp0_iter1_i_1_reg_159;
            end if;
        else 
            ap_phi_mux_i_1_phi_fu_162_p4 <= ap_phi_reg_pp0_iter1_i_1_reg_159;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_151_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_1_reg_288, i_reg_147, i_3_fu_259_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_1_reg_288 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_151_p4 <= i_3_fu_259_p2;
        else 
            ap_phi_mux_i_phi_fu_151_p4 <= i_reg_147;
        end if; 
    end process;


    ap_phi_mux_match_phi_fu_139_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_tmp_1_reg_288, tmp_7_reg_322, match_reg_135)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_reg_pp0_iter1_tmp_1_reg_288 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_match_phi_fu_139_p4 <= tmp_7_reg_322;
        else 
            ap_phi_mux_match_phi_fu_139_p4 <= match_reg_135;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_i_1_reg_159 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op62_write_state4_assign_proc : process(ap_reg_pp0_iter1_tmp_1_reg_288, tmp_7_reg_322)
    begin
                ap_predicate_op62_write_state4 <= ((tmp_7_reg_322 = ap_const_lv1_1) and (ap_reg_pp0_iter1_tmp_1_reg_288 = ap_const_lv1_1));
    end process;


    ap_predicate_op65_write_state5_assign_proc : process(ap_reg_pp0_iter2_tmp_1_reg_288, ap_reg_pp0_iter2_tmp_7_reg_322)
    begin
                ap_predicate_op65_write_state5 <= ((ap_reg_pp0_iter2_tmp_7_reg_322 = ap_const_lv1_1) and (ap_reg_pp0_iter2_tmp_1_reg_288 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(capture_64_data_V_1_ack_in, capture_64_keep_V_1_ack_in, capture_64_strb_V_1_ack_in, capture_64_user_V_1_ack_in, capture_64_last_V_1_ack_in, capture_64_id_V_1_ack_in, capture_64_dest_V_1_ack_in, ap_CS_fsm_state6)
    begin
        if ((not(((capture_64_dest_V_1_ack_in = ap_const_logic_0) or (capture_64_id_V_1_ack_in = ap_const_logic_0) or (capture_64_last_V_1_ack_in = ap_const_logic_0) or (capture_64_user_V_1_ack_in = ap_const_logic_0) or (capture_64_strb_V_1_ack_in = ap_const_logic_0) or (capture_64_keep_V_1_ack_in = ap_const_logic_0) or (capture_64_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    capture_64_TDATA <= capture_64_data_V_1_data_out;

    capture_64_TDATA_blk_n_assign_proc : process(capture_64_data_V_1_state, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_tmp_1_reg_288, tmp_7_reg_322, ap_enable_reg_pp0_iter3, ap_reg_pp0_iter2_tmp_1_reg_288, ap_reg_pp0_iter2_tmp_7_reg_322)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_reg_pp0_iter2_tmp_7_reg_322 = ap_const_lv1_1) and (ap_reg_pp0_iter2_tmp_1_reg_288 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_7_reg_322 = ap_const_lv1_1) and (ap_reg_pp0_iter1_tmp_1_reg_288 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            capture_64_TDATA_blk_n <= capture_64_data_V_1_state(1);
        else 
            capture_64_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    capture_64_TDEST <= capture_64_dest_V_1_data_out;
    capture_64_TID <= capture_64_id_V_1_data_out;
    capture_64_TKEEP <= capture_64_keep_V_1_data_out;
    capture_64_TLAST <= capture_64_last_V_1_data_out;
    capture_64_TSTRB <= capture_64_strb_V_1_data_out;
    capture_64_TUSER <= capture_64_user_V_1_data_out;
    capture_64_TVALID <= capture_64_dest_V_1_state(0);
    capture_64_data_V_1_ack_in <= capture_64_data_V_1_state(1);
    capture_64_data_V_1_ack_out <= capture_64_TREADY;

    capture_64_data_V_1_data_out_assign_proc : process(capture_64_data_V_1_payload_A, capture_64_data_V_1_payload_B, capture_64_data_V_1_sel)
    begin
        if ((capture_64_data_V_1_sel = ap_const_logic_1)) then 
            capture_64_data_V_1_data_out <= capture_64_data_V_1_payload_B;
        else 
            capture_64_data_V_1_data_out <= capture_64_data_V_1_payload_A;
        end if; 
    end process;

    capture_64_data_V_1_load_A <= (not(capture_64_data_V_1_sel_wr) and capture_64_data_V_1_state_cmp_full);
    capture_64_data_V_1_load_B <= (capture_64_data_V_1_state_cmp_full and capture_64_data_V_1_sel_wr);
    capture_64_data_V_1_sel <= capture_64_data_V_1_sel_rd;
    capture_64_data_V_1_state_cmp_full <= '0' when (capture_64_data_V_1_state = ap_const_lv2_1) else '1';

    capture_64_data_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op62_write_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op62_write_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            capture_64_data_V_1_vld_in <= ap_const_logic_1;
        else 
            capture_64_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    capture_64_data_V_1_vld_out <= capture_64_data_V_1_state(0);
    capture_64_dest_V_1_ack_in <= capture_64_dest_V_1_state(1);
    capture_64_dest_V_1_ack_out <= capture_64_TREADY;

    capture_64_dest_V_1_data_out_assign_proc : process(capture_64_dest_V_1_payload_A, capture_64_dest_V_1_payload_B, capture_64_dest_V_1_sel)
    begin
        if ((capture_64_dest_V_1_sel = ap_const_logic_1)) then 
            capture_64_dest_V_1_data_out <= capture_64_dest_V_1_payload_B;
        else 
            capture_64_dest_V_1_data_out <= capture_64_dest_V_1_payload_A;
        end if; 
    end process;

    capture_64_dest_V_1_load_A <= (not(capture_64_dest_V_1_sel_wr) and capture_64_dest_V_1_state_cmp_full);
    capture_64_dest_V_1_load_B <= (capture_64_dest_V_1_state_cmp_full and capture_64_dest_V_1_sel_wr);
    capture_64_dest_V_1_sel <= capture_64_dest_V_1_sel_rd;
    capture_64_dest_V_1_state_cmp_full <= '0' when (capture_64_dest_V_1_state = ap_const_lv2_1) else '1';

    capture_64_dest_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op62_write_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op62_write_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            capture_64_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            capture_64_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    capture_64_dest_V_1_vld_out <= capture_64_dest_V_1_state(0);
    capture_64_id_V_1_ack_in <= capture_64_id_V_1_state(1);
    capture_64_id_V_1_ack_out <= capture_64_TREADY;

    capture_64_id_V_1_data_out_assign_proc : process(capture_64_id_V_1_payload_A, capture_64_id_V_1_payload_B, capture_64_id_V_1_sel)
    begin
        if ((capture_64_id_V_1_sel = ap_const_logic_1)) then 
            capture_64_id_V_1_data_out <= capture_64_id_V_1_payload_B;
        else 
            capture_64_id_V_1_data_out <= capture_64_id_V_1_payload_A;
        end if; 
    end process;

    capture_64_id_V_1_load_A <= (not(capture_64_id_V_1_sel_wr) and capture_64_id_V_1_state_cmp_full);
    capture_64_id_V_1_load_B <= (capture_64_id_V_1_state_cmp_full and capture_64_id_V_1_sel_wr);
    capture_64_id_V_1_sel <= capture_64_id_V_1_sel_rd;
    capture_64_id_V_1_state_cmp_full <= '0' when (capture_64_id_V_1_state = ap_const_lv2_1) else '1';

    capture_64_id_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op62_write_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op62_write_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            capture_64_id_V_1_vld_in <= ap_const_logic_1;
        else 
            capture_64_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    capture_64_id_V_1_vld_out <= capture_64_id_V_1_state(0);
    capture_64_keep_V_1_ack_in <= capture_64_keep_V_1_state(1);
    capture_64_keep_V_1_ack_out <= capture_64_TREADY;

    capture_64_keep_V_1_data_out_assign_proc : process(capture_64_keep_V_1_payload_A, capture_64_keep_V_1_payload_B, capture_64_keep_V_1_sel)
    begin
        if ((capture_64_keep_V_1_sel = ap_const_logic_1)) then 
            capture_64_keep_V_1_data_out <= capture_64_keep_V_1_payload_B;
        else 
            capture_64_keep_V_1_data_out <= capture_64_keep_V_1_payload_A;
        end if; 
    end process;

    capture_64_keep_V_1_load_A <= (not(capture_64_keep_V_1_sel_wr) and capture_64_keep_V_1_state_cmp_full);
    capture_64_keep_V_1_load_B <= (capture_64_keep_V_1_state_cmp_full and capture_64_keep_V_1_sel_wr);
    capture_64_keep_V_1_sel <= capture_64_keep_V_1_sel_rd;
    capture_64_keep_V_1_state_cmp_full <= '0' when (capture_64_keep_V_1_state = ap_const_lv2_1) else '1';

    capture_64_keep_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op62_write_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op62_write_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            capture_64_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            capture_64_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    capture_64_keep_V_1_vld_out <= capture_64_keep_V_1_state(0);
    capture_64_last_V_1_ack_in <= capture_64_last_V_1_state(1);
    capture_64_last_V_1_ack_out <= capture_64_TREADY;

    capture_64_last_V_1_data_out_assign_proc : process(capture_64_last_V_1_payload_A, capture_64_last_V_1_payload_B, capture_64_last_V_1_sel)
    begin
        if ((capture_64_last_V_1_sel = ap_const_logic_1)) then 
            capture_64_last_V_1_data_out <= capture_64_last_V_1_payload_B;
        else 
            capture_64_last_V_1_data_out <= capture_64_last_V_1_payload_A;
        end if; 
    end process;

    capture_64_last_V_1_load_A <= (not(capture_64_last_V_1_sel_wr) and capture_64_last_V_1_state_cmp_full);
    capture_64_last_V_1_load_B <= (capture_64_last_V_1_state_cmp_full and capture_64_last_V_1_sel_wr);
    capture_64_last_V_1_sel <= capture_64_last_V_1_sel_rd;
    capture_64_last_V_1_state_cmp_full <= '0' when (capture_64_last_V_1_state = ap_const_lv2_1) else '1';

    capture_64_last_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op62_write_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op62_write_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            capture_64_last_V_1_vld_in <= ap_const_logic_1;
        else 
            capture_64_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    capture_64_last_V_1_vld_out <= capture_64_last_V_1_state(0);
    capture_64_strb_V_1_ack_in <= capture_64_strb_V_1_state(1);
    capture_64_strb_V_1_ack_out <= capture_64_TREADY;

    capture_64_strb_V_1_data_out_assign_proc : process(capture_64_strb_V_1_payload_A, capture_64_strb_V_1_payload_B, capture_64_strb_V_1_sel)
    begin
        if ((capture_64_strb_V_1_sel = ap_const_logic_1)) then 
            capture_64_strb_V_1_data_out <= capture_64_strb_V_1_payload_B;
        else 
            capture_64_strb_V_1_data_out <= capture_64_strb_V_1_payload_A;
        end if; 
    end process;

    capture_64_strb_V_1_load_A <= (not(capture_64_strb_V_1_sel_wr) and capture_64_strb_V_1_state_cmp_full);
    capture_64_strb_V_1_load_B <= (capture_64_strb_V_1_state_cmp_full and capture_64_strb_V_1_sel_wr);
    capture_64_strb_V_1_sel <= capture_64_strb_V_1_sel_rd;
    capture_64_strb_V_1_state_cmp_full <= '0' when (capture_64_strb_V_1_state = ap_const_lv2_1) else '1';

    capture_64_strb_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op62_write_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op62_write_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            capture_64_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            capture_64_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    capture_64_strb_V_1_vld_out <= capture_64_strb_V_1_state(0);
    capture_64_user_V_1_ack_in <= capture_64_user_V_1_state(1);
    capture_64_user_V_1_ack_out <= capture_64_TREADY;

    capture_64_user_V_1_data_out_assign_proc : process(capture_64_user_V_1_payload_A, capture_64_user_V_1_payload_B, capture_64_user_V_1_sel)
    begin
        if ((capture_64_user_V_1_sel = ap_const_logic_1)) then 
            capture_64_user_V_1_data_out <= capture_64_user_V_1_payload_B;
        else 
            capture_64_user_V_1_data_out <= capture_64_user_V_1_payload_A;
        end if; 
    end process;

    capture_64_user_V_1_load_A <= (not(capture_64_user_V_1_sel_wr) and capture_64_user_V_1_state_cmp_full);
    capture_64_user_V_1_load_B <= (capture_64_user_V_1_state_cmp_full and capture_64_user_V_1_sel_wr);
    capture_64_user_V_1_sel <= capture_64_user_V_1_sel_rd;
    capture_64_user_V_1_state_cmp_full <= '0' when (capture_64_user_V_1_state = ap_const_lv2_1) else '1';

    capture_64_user_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op62_write_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op62_write_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            capture_64_user_V_1_vld_in <= ap_const_logic_1;
        else 
            capture_64_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    capture_64_user_V_1_vld_out <= capture_64_user_V_1_state(0);
    i_2_fu_233_p2 <= std_logic_vector(unsigned(i_reg_147) + unsigned(ap_const_lv32_FFFFFFFF));
    i_3_fu_259_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_162_p4) + unsigned(ap_const_lv32_1));
    samples_1_fu_248_p2 <= std_logic_vector(unsigned(samples_fu_76) + unsigned(ap_const_lv32_1));
    tmp_1_fu_184_p2 <= "1" when (signed(ap_phi_mux_i_phi_fu_151_p4) < signed(length_read_reg_272)) else "0";
    tmp_2_fu_175_p1 <= trigger_V(32 - 1 downto 0);
    tmp_3_fu_213_p1 <= trace_64_data_V_0_data_out(32 - 1 downto 0);
    tmp_5_fu_217_p2 <= (tmp_3_fu_213_p1 and tmp_2_reg_282);
    tmp_6_fu_222_p2 <= "1" when (tmp_5_fu_217_p2 = tmp_2_reg_282) else "0";
    tmp_7_fu_227_p2 <= (tmp_6_fu_222_p2 or ap_phi_mux_match_phi_fu_139_p4);
    tmp_fu_169_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(length_r));

    trace_64_TDATA_blk_n_assign_proc : process(trace_64_data_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_1_reg_288)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_1_reg_288 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            trace_64_TDATA_blk_n <= trace_64_data_V_0_state(0);
        else 
            trace_64_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    trace_64_TREADY <= trace_64_dest_V_0_state(1);
    trace_64_data_V_0_ack_in <= trace_64_data_V_0_state(1);

    trace_64_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_1_reg_288, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_1_reg_288 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            trace_64_data_V_0_ack_out <= ap_const_logic_1;
        else 
            trace_64_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    trace_64_data_V_0_data_out_assign_proc : process(trace_64_data_V_0_payload_A, trace_64_data_V_0_payload_B, trace_64_data_V_0_sel)
    begin
        if ((trace_64_data_V_0_sel = ap_const_logic_1)) then 
            trace_64_data_V_0_data_out <= trace_64_data_V_0_payload_B;
        else 
            trace_64_data_V_0_data_out <= trace_64_data_V_0_payload_A;
        end if; 
    end process;

    trace_64_data_V_0_load_A <= (trace_64_data_V_0_state_cmp_full and not(trace_64_data_V_0_sel_wr));
    trace_64_data_V_0_load_B <= (trace_64_data_V_0_state_cmp_full and trace_64_data_V_0_sel_wr);
    trace_64_data_V_0_sel <= trace_64_data_V_0_sel_rd;
    trace_64_data_V_0_state_cmp_full <= '0' when (trace_64_data_V_0_state = ap_const_lv2_1) else '1';
    trace_64_data_V_0_vld_in <= trace_64_TVALID;
    trace_64_data_V_0_vld_out <= trace_64_data_V_0_state(0);
    trace_64_dest_V_0_ack_in <= trace_64_dest_V_0_state(1);

    trace_64_dest_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_1_reg_288, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_1_reg_288 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            trace_64_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            trace_64_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    trace_64_dest_V_0_data_out_assign_proc : process(trace_64_dest_V_0_payload_A, trace_64_dest_V_0_payload_B, trace_64_dest_V_0_sel)
    begin
        if ((trace_64_dest_V_0_sel = ap_const_logic_1)) then 
            trace_64_dest_V_0_data_out <= trace_64_dest_V_0_payload_B;
        else 
            trace_64_dest_V_0_data_out <= trace_64_dest_V_0_payload_A;
        end if; 
    end process;

    trace_64_dest_V_0_load_A <= (trace_64_dest_V_0_state_cmp_full and not(trace_64_dest_V_0_sel_wr));
    trace_64_dest_V_0_load_B <= (trace_64_dest_V_0_state_cmp_full and trace_64_dest_V_0_sel_wr);
    trace_64_dest_V_0_sel <= trace_64_dest_V_0_sel_rd;
    trace_64_dest_V_0_state_cmp_full <= '0' when (trace_64_dest_V_0_state = ap_const_lv2_1) else '1';
    trace_64_dest_V_0_vld_in <= trace_64_TVALID;
    trace_64_dest_V_0_vld_out <= trace_64_dest_V_0_state(0);
    trace_64_id_V_0_ack_in <= trace_64_id_V_0_state(1);

    trace_64_id_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_1_reg_288, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_1_reg_288 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            trace_64_id_V_0_ack_out <= ap_const_logic_1;
        else 
            trace_64_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    trace_64_id_V_0_data_out_assign_proc : process(trace_64_id_V_0_payload_A, trace_64_id_V_0_payload_B, trace_64_id_V_0_sel)
    begin
        if ((trace_64_id_V_0_sel = ap_const_logic_1)) then 
            trace_64_id_V_0_data_out <= trace_64_id_V_0_payload_B;
        else 
            trace_64_id_V_0_data_out <= trace_64_id_V_0_payload_A;
        end if; 
    end process;

    trace_64_id_V_0_load_A <= (trace_64_id_V_0_state_cmp_full and not(trace_64_id_V_0_sel_wr));
    trace_64_id_V_0_load_B <= (trace_64_id_V_0_state_cmp_full and trace_64_id_V_0_sel_wr);
    trace_64_id_V_0_sel <= trace_64_id_V_0_sel_rd;
    trace_64_id_V_0_state_cmp_full <= '0' when (trace_64_id_V_0_state = ap_const_lv2_1) else '1';
    trace_64_id_V_0_vld_in <= trace_64_TVALID;
    trace_64_id_V_0_vld_out <= trace_64_id_V_0_state(0);
    trace_64_keep_V_0_ack_in <= trace_64_keep_V_0_state(1);

    trace_64_keep_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_1_reg_288, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_1_reg_288 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            trace_64_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            trace_64_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    trace_64_keep_V_0_data_out_assign_proc : process(trace_64_keep_V_0_payload_A, trace_64_keep_V_0_payload_B, trace_64_keep_V_0_sel)
    begin
        if ((trace_64_keep_V_0_sel = ap_const_logic_1)) then 
            trace_64_keep_V_0_data_out <= trace_64_keep_V_0_payload_B;
        else 
            trace_64_keep_V_0_data_out <= trace_64_keep_V_0_payload_A;
        end if; 
    end process;

    trace_64_keep_V_0_load_A <= (trace_64_keep_V_0_state_cmp_full and not(trace_64_keep_V_0_sel_wr));
    trace_64_keep_V_0_load_B <= (trace_64_keep_V_0_state_cmp_full and trace_64_keep_V_0_sel_wr);
    trace_64_keep_V_0_sel <= trace_64_keep_V_0_sel_rd;
    trace_64_keep_V_0_state_cmp_full <= '0' when (trace_64_keep_V_0_state = ap_const_lv2_1) else '1';
    trace_64_keep_V_0_vld_in <= trace_64_TVALID;
    trace_64_keep_V_0_vld_out <= trace_64_keep_V_0_state(0);
    trace_64_strb_V_0_ack_in <= trace_64_strb_V_0_state(1);

    trace_64_strb_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_1_reg_288, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_1_reg_288 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            trace_64_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            trace_64_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    trace_64_strb_V_0_data_out_assign_proc : process(trace_64_strb_V_0_payload_A, trace_64_strb_V_0_payload_B, trace_64_strb_V_0_sel)
    begin
        if ((trace_64_strb_V_0_sel = ap_const_logic_1)) then 
            trace_64_strb_V_0_data_out <= trace_64_strb_V_0_payload_B;
        else 
            trace_64_strb_V_0_data_out <= trace_64_strb_V_0_payload_A;
        end if; 
    end process;

    trace_64_strb_V_0_load_A <= (trace_64_strb_V_0_state_cmp_full and not(trace_64_strb_V_0_sel_wr));
    trace_64_strb_V_0_load_B <= (trace_64_strb_V_0_state_cmp_full and trace_64_strb_V_0_sel_wr);
    trace_64_strb_V_0_sel <= trace_64_strb_V_0_sel_rd;
    trace_64_strb_V_0_state_cmp_full <= '0' when (trace_64_strb_V_0_state = ap_const_lv2_1) else '1';
    trace_64_strb_V_0_vld_in <= trace_64_TVALID;
    trace_64_strb_V_0_vld_out <= trace_64_strb_V_0_state(0);
    trace_64_user_V_0_ack_in <= trace_64_user_V_0_state(1);

    trace_64_user_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_1_reg_288, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_1_reg_288 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            trace_64_user_V_0_ack_out <= ap_const_logic_1;
        else 
            trace_64_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    trace_64_user_V_0_data_out_assign_proc : process(trace_64_user_V_0_payload_A, trace_64_user_V_0_payload_B, trace_64_user_V_0_sel)
    begin
        if ((trace_64_user_V_0_sel = ap_const_logic_1)) then 
            trace_64_user_V_0_data_out <= trace_64_user_V_0_payload_B;
        else 
            trace_64_user_V_0_data_out <= trace_64_user_V_0_payload_A;
        end if; 
    end process;

    trace_64_user_V_0_load_A <= (trace_64_user_V_0_state_cmp_full and not(trace_64_user_V_0_sel_wr));
    trace_64_user_V_0_load_B <= (trace_64_user_V_0_state_cmp_full and trace_64_user_V_0_sel_wr);
    trace_64_user_V_0_sel <= trace_64_user_V_0_sel_rd;
    trace_64_user_V_0_state_cmp_full <= '0' when (trace_64_user_V_0_state = ap_const_lv2_1) else '1';
    trace_64_user_V_0_vld_in <= trace_64_TVALID;
    trace_64_user_V_0_vld_out <= trace_64_user_V_0_state(0);
    trace_temp_last_V_fu_243_p2 <= "1" when (samples_fu_76 = tmp_reg_277) else "0";
end behav;
