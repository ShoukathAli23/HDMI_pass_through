// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="color_convert,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=1153,HLS_SYN_LUT=1489}" *)

module color_convert (
        ap_clk,
        ap_rst_n,
        stream_in_24_TDATA,
        stream_in_24_TVALID,
        stream_in_24_TREADY,
        stream_in_24_TUSER,
        stream_in_24_TLAST,
        stream_out_24_TDATA,
        stream_out_24_TVALID,
        stream_out_24_TREADY,
        stream_out_24_TUSER,
        stream_out_24_TLAST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        control,
        ap_rst_n_control
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [23:0] stream_in_24_TDATA;
input   stream_in_24_TVALID;
output   stream_in_24_TREADY;
input  [0:0] stream_in_24_TUSER;
input  [0:0] stream_in_24_TLAST;
output  [23:0] stream_out_24_TDATA;
output   stream_out_24_TVALID;
input   stream_out_24_TREADY;
output  [0:0] stream_out_24_TUSER;
output  [0:0] stream_out_24_TLAST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   control;
input   ap_rst_n_control;

reg    ap_rst_n_inv;
reg   [23:0] stream_in_24_data_0_data_out;
wire    stream_in_24_data_0_vld_in;
wire    stream_in_24_data_0_vld_out;
wire    stream_in_24_data_0_ack_in;
reg    stream_in_24_data_0_ack_out;
reg   [23:0] stream_in_24_data_0_payload_A;
reg   [23:0] stream_in_24_data_0_payload_B;
reg    stream_in_24_data_0_sel_rd;
reg    stream_in_24_data_0_sel_wr;
wire    stream_in_24_data_0_sel;
wire    stream_in_24_data_0_load_A;
wire    stream_in_24_data_0_load_B;
reg   [1:0] stream_in_24_data_0_state;
wire    stream_in_24_data_0_state_cmp_full;
reg   [0:0] stream_in_24_user_V_0_data_out;
wire    stream_in_24_user_V_0_vld_in;
wire    stream_in_24_user_V_0_vld_out;
wire    stream_in_24_user_V_0_ack_in;
reg    stream_in_24_user_V_0_ack_out;
reg   [0:0] stream_in_24_user_V_0_payload_A;
reg   [0:0] stream_in_24_user_V_0_payload_B;
reg    stream_in_24_user_V_0_sel_rd;
reg    stream_in_24_user_V_0_sel_wr;
wire    stream_in_24_user_V_0_sel;
wire    stream_in_24_user_V_0_load_A;
wire    stream_in_24_user_V_0_load_B;
reg   [1:0] stream_in_24_user_V_0_state;
wire    stream_in_24_user_V_0_state_cmp_full;
reg   [0:0] stream_in_24_last_V_0_data_out;
wire    stream_in_24_last_V_0_vld_in;
wire    stream_in_24_last_V_0_vld_out;
wire    stream_in_24_last_V_0_ack_in;
reg    stream_in_24_last_V_0_ack_out;
reg   [0:0] stream_in_24_last_V_0_payload_A;
reg   [0:0] stream_in_24_last_V_0_payload_B;
reg    stream_in_24_last_V_0_sel_rd;
reg    stream_in_24_last_V_0_sel_wr;
wire    stream_in_24_last_V_0_sel;
wire    stream_in_24_last_V_0_load_A;
wire    stream_in_24_last_V_0_load_B;
reg   [1:0] stream_in_24_last_V_0_state;
wire    stream_in_24_last_V_0_state_cmp_full;
reg   [23:0] stream_out_24_data_1_data_out;
reg    stream_out_24_data_1_vld_in;
wire    stream_out_24_data_1_vld_out;
wire    stream_out_24_data_1_ack_in;
wire    stream_out_24_data_1_ack_out;
reg   [23:0] stream_out_24_data_1_payload_A;
reg   [23:0] stream_out_24_data_1_payload_B;
reg    stream_out_24_data_1_sel_rd;
reg    stream_out_24_data_1_sel_wr;
wire    stream_out_24_data_1_sel;
wire    stream_out_24_data_1_load_A;
wire    stream_out_24_data_1_load_B;
reg   [1:0] stream_out_24_data_1_state;
wire    stream_out_24_data_1_state_cmp_full;
reg   [0:0] stream_out_24_user_V_1_data_out;
reg    stream_out_24_user_V_1_vld_in;
wire    stream_out_24_user_V_1_vld_out;
wire    stream_out_24_user_V_1_ack_in;
wire    stream_out_24_user_V_1_ack_out;
reg   [0:0] stream_out_24_user_V_1_payload_A;
reg   [0:0] stream_out_24_user_V_1_payload_B;
reg    stream_out_24_user_V_1_sel_rd;
reg    stream_out_24_user_V_1_sel_wr;
wire    stream_out_24_user_V_1_sel;
wire    stream_out_24_user_V_1_load_A;
wire    stream_out_24_user_V_1_load_B;
reg   [1:0] stream_out_24_user_V_1_state;
wire    stream_out_24_user_V_1_state_cmp_full;
reg   [0:0] stream_out_24_last_V_1_data_out;
reg    stream_out_24_last_V_1_vld_in;
wire    stream_out_24_last_V_1_vld_out;
wire    stream_out_24_last_V_1_ack_in;
wire    stream_out_24_last_V_1_ack_out;
reg   [0:0] stream_out_24_last_V_1_payload_A;
reg   [0:0] stream_out_24_last_V_1_payload_B;
reg    stream_out_24_last_V_1_sel_rd;
reg    stream_out_24_last_V_1_sel_wr;
wire    stream_out_24_last_V_1_sel;
wire    stream_out_24_last_V_1_load_A;
wire    stream_out_24_last_V_1_load_B;
reg   [1:0] stream_out_24_last_V_1_state;
wire    stream_out_24_last_V_1_state_cmp_full;
wire   [9:0] c1_c1_V;
reg   [9:0] c1_c1_V_0_data_reg;
reg    c1_c1_V_0_vld_reg;
reg    c1_c1_V_0_ack_out;
wire   [9:0] c1_c2_V;
reg   [9:0] c1_c2_V_0_data_reg;
reg    c1_c2_V_0_vld_reg;
reg    c1_c2_V_0_ack_out;
wire   [9:0] c1_c3_V;
reg   [9:0] c1_c3_V_0_data_reg;
reg    c1_c3_V_0_vld_reg;
reg    c1_c3_V_0_ack_out;
wire   [9:0] c2_c1_V;
reg   [9:0] c2_c1_V_0_data_reg;
reg    c2_c1_V_0_vld_reg;
reg    c2_c1_V_0_ack_out;
wire   [9:0] c2_c2_V;
reg   [9:0] c2_c2_V_0_data_reg;
reg    c2_c2_V_0_vld_reg;
reg    c2_c2_V_0_ack_out;
wire   [9:0] c2_c3_V;
reg   [9:0] c2_c3_V_0_data_reg;
reg    c2_c3_V_0_vld_reg;
reg    c2_c3_V_0_ack_out;
wire   [9:0] c3_c1_V;
reg   [9:0] c3_c1_V_0_data_reg;
reg    c3_c1_V_0_vld_reg;
reg    c3_c1_V_0_ack_out;
wire   [9:0] c3_c2_V;
reg   [9:0] c3_c2_V_0_data_reg;
reg    c3_c2_V_0_vld_reg;
reg    c3_c2_V_0_ack_out;
wire   [9:0] c3_c3_V;
reg   [9:0] c3_c3_V_0_data_reg;
reg    c3_c3_V_0_vld_reg;
reg    c3_c3_V_0_ack_out;
wire   [9:0] bias_c1_V;
reg   [9:0] bias_c1_V_0_data_reg;
reg    bias_c1_V_0_vld_reg;
reg    bias_c1_V_0_ack_out;
wire   [9:0] bias_c2_V;
reg   [9:0] bias_c2_V_0_data_reg;
reg    bias_c2_V_0_vld_reg;
reg    bias_c2_V_0_ack_out;
wire   [9:0] bias_c3_V;
reg   [9:0] bias_c3_V_0_data_reg;
reg    bias_c3_V_0_vld_reg;
reg    bias_c3_V_0_ack_out;
reg    stream_in_24_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    stream_out_24_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_rst_n_control_inv;
reg   [9:0] bias_c3_V_read_reg_905;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
reg   [9:0] ap_reg_pp0_iter2_bias_c3_V_read_reg_905;
reg   [9:0] ap_reg_pp0_iter3_bias_c3_V_read_reg_905;
reg   [9:0] bias_c2_V_read_reg_910;
reg   [9:0] ap_reg_pp0_iter2_bias_c2_V_read_reg_910;
reg   [9:0] ap_reg_pp0_iter3_bias_c2_V_read_reg_910;
reg   [9:0] bias_c1_V_read_reg_915;
reg   [9:0] ap_reg_pp0_iter2_bias_c1_V_read_reg_915;
reg   [9:0] ap_reg_pp0_iter3_bias_c1_V_read_reg_915;
reg   [9:0] c3_c3_V_read_reg_920;
reg  signed [9:0] ap_reg_pp0_iter2_c3_c3_V_read_reg_920;
reg  signed [9:0] c3_c1_V_read_reg_925;
reg   [9:0] c2_c3_V_read_reg_930;
reg  signed [9:0] ap_reg_pp0_iter2_c2_c3_V_read_reg_930;
reg  signed [9:0] c2_c1_V_read_reg_935;
reg   [9:0] c1_c3_V_read_reg_940;
reg  signed [9:0] ap_reg_pp0_iter2_c1_c3_V_read_reg_940;
reg  signed [9:0] c1_c1_V_read_reg_945;
reg   [0:0] stream_in_24_user_V_s_reg_950;
reg   [0:0] ap_reg_pp0_iter2_stream_in_24_user_V_s_reg_950;
reg   [0:0] ap_reg_pp0_iter3_stream_in_24_user_V_s_reg_950;
reg   [0:0] ap_reg_pp0_iter4_stream_in_24_user_V_s_reg_950;
reg   [0:0] stream_in_24_last_V_s_reg_955;
reg   [0:0] ap_reg_pp0_iter2_stream_in_24_last_V_s_reg_955;
reg   [0:0] ap_reg_pp0_iter3_stream_in_24_last_V_s_reg_955;
reg   [0:0] ap_reg_pp0_iter4_stream_in_24_last_V_s_reg_955;
wire   [7:0] loc_V_fu_215_p1;
reg   [7:0] loc_V_reg_960;
reg   [7:0] loc_V_2_reg_965;
reg   [7:0] ap_reg_pp0_iter2_loc_V_2_reg_965;
wire   [17:0] p_Val2_1_fu_247_p2;
reg  signed [17:0] p_Val2_1_reg_970;
wire   [17:0] p_Val2_9_fu_257_p2;
reg  signed [17:0] p_Val2_9_reg_975;
wire   [17:0] p_Val2_16_fu_267_p2;
reg  signed [17:0] p_Val2_16_reg_980;
wire  signed [18:0] grp_fu_854_p3;
reg  signed [18:0] p_Val2_2_reg_985;
reg    ap_enable_reg_pp0_iter2;
wire  signed [18:0] grp_fu_862_p3;
reg  signed [18:0] p_Val2_11_reg_990;
wire  signed [18:0] grp_fu_870_p3;
reg  signed [18:0] p_Val2_19_reg_995;
wire  signed [19:0] grp_fu_878_p3;
reg  signed [19:0] p_Val2_4_reg_1000;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_28_reg_1005;
wire  signed [19:0] grp_fu_887_p3;
reg  signed [19:0] p_Val2_12_reg_1010;
reg   [0:0] tmp_32_reg_1015;
wire  signed [19:0] grp_fu_896_p3;
reg  signed [19:0] p_Val2_20_reg_1020;
reg   [0:0] tmp_36_reg_1025;
reg   [0:0] signbit_reg_1030;
wire   [7:0] p_Val2_7_fu_381_p2;
reg   [7:0] p_Val2_7_reg_1037;
wire   [0:0] carry_fu_401_p2;
reg   [0:0] carry_reg_1043;
wire   [0:0] Range1_all_ones_fu_417_p2;
reg   [0:0] Range1_all_ones_reg_1049;
wire   [0:0] Range1_all_zeros_fu_423_p2;
reg   [0:0] Range1_all_zeros_reg_1055;
reg   [0:0] signbit_1_reg_1060;
wire   [7:0] p_Val2_15_fu_474_p2;
reg   [7:0] p_Val2_15_reg_1067;
wire   [0:0] carry_1_fu_494_p2;
reg   [0:0] carry_1_reg_1073;
wire   [0:0] Range1_all_ones_1_fu_510_p2;
reg   [0:0] Range1_all_ones_1_reg_1079;
wire   [0:0] Range1_all_zeros_1_fu_516_p2;
reg   [0:0] Range1_all_zeros_1_reg_1085;
reg   [0:0] signbit_2_reg_1090;
wire   [7:0] p_Val2_23_fu_567_p2;
reg   [7:0] p_Val2_23_reg_1097;
wire   [0:0] carry_2_fu_587_p2;
reg   [0:0] carry_2_reg_1103;
wire   [0:0] Range1_all_ones_2_fu_603_p2;
reg   [0:0] Range1_all_ones_2_reg_1109;
wire   [0:0] Range1_all_zeros_2_fu_609_p2;
reg   [0:0] Range1_all_zeros_2_reg_1115;
wire   [23:0] stream_out_24_data_t_fu_843_p4;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter4;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] loc_V_1_fu_219_p4;
wire   [7:0] p_Val2_1_fu_247_p0;
wire   [17:0] OP1_V_1_fu_239_p1;
wire  signed [9:0] p_Val2_1_fu_247_p1;
wire   [7:0] p_Val2_9_fu_257_p0;
wire  signed [9:0] p_Val2_9_fu_257_p1;
wire   [7:0] p_Val2_16_fu_267_p0;
wire  signed [9:0] p_Val2_16_fu_267_p1;
wire   [17:0] tmp_3_fu_336_p3;
wire  signed [19:0] tmp_3_cast_fu_343_p1;
(* use_dsp48 = "no" *) wire   [19:0] p_Val2_5_fu_347_p2;
wire   [7:0] tmp_7_fu_370_p1;
wire   [7:0] p_Val2_6_fu_360_p4;
wire   [0:0] tmp_30_fu_387_p3;
wire   [0:0] tmp_29_fu_373_p3;
wire   [0:0] tmp_5_fu_395_p2;
wire   [3:0] tmp_2_fu_407_p4;
wire   [17:0] tmp_12_fu_429_p3;
wire  signed [19:0] tmp_16_cast_fu_436_p1;
(* use_dsp48 = "no" *) wire   [19:0] p_Val2_13_fu_440_p2;
wire   [7:0] tmp_13_fu_463_p1;
wire   [7:0] p_Val2_14_fu_453_p4;
wire   [0:0] tmp_34_fu_480_p3;
wire   [0:0] tmp_33_fu_466_p3;
wire   [0:0] tmp_14_fu_488_p2;
wire   [3:0] tmp_15_fu_500_p4;
wire   [17:0] tmp_21_fu_522_p3;
wire  signed [19:0] tmp_27_cast_fu_529_p1;
(* use_dsp48 = "no" *) wire   [19:0] p_Val2_21_fu_533_p2;
wire   [7:0] tmp_22_fu_556_p1;
wire   [7:0] p_Val2_22_fu_546_p4;
wire   [0:0] tmp_38_fu_573_p3;
wire   [0:0] tmp_37_fu_559_p3;
wire   [0:0] tmp_23_fu_581_p2;
wire   [3:0] tmp_24_fu_593_p4;
wire   [0:0] p_38_i_fu_620_p2;
wire   [0:0] tmp_8_fu_624_p2;
wire   [0:0] deleted_zeros_fu_615_p3;
wire   [0:0] signbit_not_fu_640_p2;
wire   [0:0] p_39_demorgan_i_fu_635_p2;
wire   [0:0] neg_src_5_not_fu_645_p2;
wire   [0:0] p_39_demorgan_i_not_fu_657_p2;
wire   [0:0] brmerge_i_i_not_fu_651_p2;
wire   [0:0] neg_src_fu_630_p2;
wire   [0:0] brmerge_fu_663_p2;
wire   [7:0] p_mux_fu_669_p3;
wire   [7:0] p_s_fu_676_p3;
wire   [0:0] p_38_i1_fu_696_p2;
wire   [0:0] tmp_16_fu_700_p2;
wire   [0:0] deleted_zeros_1_fu_691_p3;
wire   [0:0] signbit_1_not_fu_716_p2;
wire   [0:0] p_39_demorgan_i1_fu_711_p2;
wire   [0:0] neg_src_not_fu_721_p2;
wire   [0:0] p_39_demorgan_i461_no_fu_733_p2;
wire   [0:0] brmerge_i_i463_not_fu_727_p2;
wire   [0:0] neg_src_6_fu_706_p2;
wire   [0:0] brmerge1_fu_739_p2;
wire   [7:0] p_mux1_fu_745_p3;
wire   [7:0] p_1_fu_752_p3;
wire   [0:0] p_38_i2_fu_772_p2;
wire   [0:0] tmp_25_fu_776_p2;
wire   [0:0] deleted_zeros_2_fu_767_p3;
wire   [0:0] signbit_2_not_fu_792_p2;
wire   [0:0] p_39_demorgan_i2_fu_787_p2;
wire   [0:0] neg_src_6_not_fu_797_p2;
wire   [0:0] p_39_demorgan_i482_no_fu_809_p2;
wire   [0:0] brmerge_i_i484_not_fu_803_p2;
wire   [0:0] neg_src_7_fu_782_p2;
wire   [0:0] brmerge2_fu_815_p2;
wire   [7:0] p_mux2_fu_821_p3;
wire   [7:0] p_2_fu_828_p3;
wire   [7:0] out3_V_fu_835_p3;
wire   [7:0] out2_V_fu_759_p3;
wire   [7:0] out1_V_fu_683_p3;
wire   [7:0] grp_fu_854_p0;
wire   [17:0] OP1_V_fu_273_p1;
wire   [7:0] grp_fu_862_p0;
wire   [7:0] grp_fu_870_p0;
wire   [7:0] grp_fu_878_p0;
wire   [17:0] OP1_V_2_fu_294_p1;
wire   [7:0] grp_fu_887_p0;
wire   [7:0] grp_fu_896_p0;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 stream_in_24_data_0_sel_rd = 1'b0;
#0 stream_in_24_data_0_sel_wr = 1'b0;
#0 stream_in_24_data_0_state = 2'd0;
#0 stream_in_24_user_V_0_sel_rd = 1'b0;
#0 stream_in_24_user_V_0_sel_wr = 1'b0;
#0 stream_in_24_user_V_0_state = 2'd0;
#0 stream_in_24_last_V_0_sel_rd = 1'b0;
#0 stream_in_24_last_V_0_sel_wr = 1'b0;
#0 stream_in_24_last_V_0_state = 2'd0;
#0 stream_out_24_data_1_sel_rd = 1'b0;
#0 stream_out_24_data_1_sel_wr = 1'b0;
#0 stream_out_24_data_1_state = 2'd0;
#0 stream_out_24_user_V_1_sel_rd = 1'b0;
#0 stream_out_24_user_V_1_sel_wr = 1'b0;
#0 stream_out_24_user_V_1_state = 2'd0;
#0 stream_out_24_last_V_1_sel_rd = 1'b0;
#0 stream_out_24_last_V_1_sel_wr = 1'b0;
#0 stream_out_24_last_V_1_state = 2'd0;
#0 c1_c1_V_0_data_reg = 10'd0;
#0 c1_c1_V_0_vld_reg = 1'b0;
#0 c1_c2_V_0_data_reg = 10'd0;
#0 c1_c2_V_0_vld_reg = 1'b0;
#0 c1_c3_V_0_data_reg = 10'd0;
#0 c1_c3_V_0_vld_reg = 1'b0;
#0 c2_c1_V_0_data_reg = 10'd0;
#0 c2_c1_V_0_vld_reg = 1'b0;
#0 c2_c2_V_0_data_reg = 10'd0;
#0 c2_c2_V_0_vld_reg = 1'b0;
#0 c2_c3_V_0_data_reg = 10'd0;
#0 c2_c3_V_0_vld_reg = 1'b0;
#0 c3_c1_V_0_data_reg = 10'd0;
#0 c3_c1_V_0_vld_reg = 1'b0;
#0 c3_c2_V_0_data_reg = 10'd0;
#0 c3_c2_V_0_vld_reg = 1'b0;
#0 c3_c3_V_0_data_reg = 10'd0;
#0 c3_c3_V_0_vld_reg = 1'b0;
#0 bias_c1_V_0_data_reg = 10'd0;
#0 bias_c1_V_0_vld_reg = 1'b0;
#0 bias_c2_V_0_data_reg = 10'd0;
#0 bias_c2_V_0_vld_reg = 1'b0;
#0 bias_c3_V_0_data_reg = 10'd0;
#0 bias_c3_V_0_vld_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

color_convert_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
color_convert_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(control),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .c1_c1_V(c1_c1_V),
    .c1_c2_V(c1_c2_V),
    .c1_c3_V(c1_c3_V),
    .c2_c1_V(c2_c1_V),
    .c2_c2_V(c2_c2_V),
    .c2_c3_V(c2_c3_V),
    .c3_c1_V(c3_c1_V),
    .c3_c2_V(c3_c2_V),
    .c3_c3_V(c3_c3_V),
    .bias_c1_V(bias_c1_V),
    .bias_c2_V(bias_c2_V),
    .bias_c3_V(bias_c3_V),
    .clk(ap_clk),
    .rst(ap_rst_n_control_inv)
);

color_convert_macbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
color_convert_macbkb_U1(
    .din0(grp_fu_854_p0),
    .din1(c1_c1_V_read_reg_945),
    .din2(p_Val2_1_reg_970),
    .dout(grp_fu_854_p3)
);

color_convert_macbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
color_convert_macbkb_U2(
    .din0(grp_fu_862_p0),
    .din1(c2_c1_V_read_reg_935),
    .din2(p_Val2_9_reg_975),
    .dout(grp_fu_862_p3)
);

color_convert_macbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
color_convert_macbkb_U3(
    .din0(grp_fu_870_p0),
    .din1(c3_c1_V_read_reg_925),
    .din2(p_Val2_16_reg_980),
    .dout(grp_fu_870_p3)
);

color_convert_maccud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 20 ))
color_convert_maccud_U4(
    .din0(grp_fu_878_p0),
    .din1(ap_reg_pp0_iter2_c1_c3_V_read_reg_940),
    .din2(p_Val2_2_reg_985),
    .dout(grp_fu_878_p3)
);

color_convert_maccud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 20 ))
color_convert_maccud_U5(
    .din0(grp_fu_887_p0),
    .din1(ap_reg_pp0_iter2_c2_c3_V_read_reg_930),
    .din2(p_Val2_11_reg_990),
    .dout(grp_fu_887_p3)
);

color_convert_maccud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 20 ))
color_convert_maccud_U6(
    .din0(grp_fu_896_p0),
    .din1(ap_reg_pp0_iter2_c3_c3_V_read_reg_920),
    .din2(p_Val2_19_reg_995),
    .dout(grp_fu_896_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_data_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_24_data_0_ack_out == 1'b1) & (stream_in_24_data_0_vld_out == 1'b1))) begin
            stream_in_24_data_0_sel_rd <= ~stream_in_24_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_data_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_24_data_0_ack_in == 1'b1) & (stream_in_24_data_0_vld_in == 1'b1))) begin
            stream_in_24_data_0_sel_wr <= ~stream_in_24_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_data_0_state <= 2'd0;
    end else begin
        if ((((stream_in_24_data_0_vld_in == 1'b0) & (stream_in_24_data_0_state == 2'd2)) | ((stream_in_24_data_0_vld_in == 1'b0) & (stream_in_24_data_0_state == 2'd3) & (stream_in_24_data_0_ack_out == 1'b1)))) begin
            stream_in_24_data_0_state <= 2'd2;
        end else if ((((stream_in_24_data_0_ack_out == 1'b0) & (stream_in_24_data_0_state == 2'd1)) | ((stream_in_24_data_0_ack_out == 1'b0) & (stream_in_24_data_0_state == 2'd3) & (stream_in_24_data_0_vld_in == 1'b1)))) begin
            stream_in_24_data_0_state <= 2'd1;
        end else if (((~((stream_in_24_data_0_vld_in == 1'b0) & (stream_in_24_data_0_ack_out == 1'b1)) & ~((stream_in_24_data_0_ack_out == 1'b0) & (stream_in_24_data_0_vld_in == 1'b1)) & (stream_in_24_data_0_state == 2'd3)) | ((stream_in_24_data_0_state == 2'd1) & (stream_in_24_data_0_ack_out == 1'b1)) | ((stream_in_24_data_0_state == 2'd2) & (stream_in_24_data_0_vld_in == 1'b1)))) begin
            stream_in_24_data_0_state <= 2'd3;
        end else begin
            stream_in_24_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_24_last_V_0_ack_out == 1'b1) & (stream_in_24_last_V_0_vld_out == 1'b1))) begin
            stream_in_24_last_V_0_sel_rd <= ~stream_in_24_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_24_last_V_0_ack_in == 1'b1) & (stream_in_24_last_V_0_vld_in == 1'b1))) begin
            stream_in_24_last_V_0_sel_wr <= ~stream_in_24_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_last_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_24_last_V_0_state == 2'd2) & (stream_in_24_last_V_0_vld_in == 1'b0)) | ((stream_in_24_last_V_0_state == 2'd3) & (stream_in_24_last_V_0_vld_in == 1'b0) & (stream_in_24_last_V_0_ack_out == 1'b1)))) begin
            stream_in_24_last_V_0_state <= 2'd2;
        end else if ((((stream_in_24_last_V_0_state == 2'd1) & (stream_in_24_last_V_0_ack_out == 1'b0)) | ((stream_in_24_last_V_0_state == 2'd3) & (stream_in_24_last_V_0_ack_out == 1'b0) & (stream_in_24_last_V_0_vld_in == 1'b1)))) begin
            stream_in_24_last_V_0_state <= 2'd1;
        end else if (((~((stream_in_24_last_V_0_vld_in == 1'b0) & (stream_in_24_last_V_0_ack_out == 1'b1)) & ~((stream_in_24_last_V_0_ack_out == 1'b0) & (stream_in_24_last_V_0_vld_in == 1'b1)) & (stream_in_24_last_V_0_state == 2'd3)) | ((stream_in_24_last_V_0_state == 2'd1) & (stream_in_24_last_V_0_ack_out == 1'b1)) | ((stream_in_24_last_V_0_state == 2'd2) & (stream_in_24_last_V_0_vld_in == 1'b1)))) begin
            stream_in_24_last_V_0_state <= 2'd3;
        end else begin
            stream_in_24_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_24_user_V_0_ack_out == 1'b1) & (stream_in_24_user_V_0_vld_out == 1'b1))) begin
            stream_in_24_user_V_0_sel_rd <= ~stream_in_24_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_24_user_V_0_ack_in == 1'b1) & (stream_in_24_user_V_0_vld_in == 1'b1))) begin
            stream_in_24_user_V_0_sel_wr <= ~stream_in_24_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_user_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_24_user_V_0_state == 2'd3) & (stream_in_24_user_V_0_vld_in == 1'b0) & (stream_in_24_user_V_0_ack_out == 1'b1)) | ((stream_in_24_user_V_0_state == 2'd2) & (stream_in_24_user_V_0_vld_in == 1'b0)))) begin
            stream_in_24_user_V_0_state <= 2'd2;
        end else if ((((stream_in_24_user_V_0_state == 2'd1) & (stream_in_24_user_V_0_ack_out == 1'b0)) | ((stream_in_24_user_V_0_state == 2'd3) & (stream_in_24_user_V_0_ack_out == 1'b0) & (stream_in_24_user_V_0_vld_in == 1'b1)))) begin
            stream_in_24_user_V_0_state <= 2'd1;
        end else if ((((stream_in_24_user_V_0_state == 2'd1) & (stream_in_24_user_V_0_ack_out == 1'b1)) | ((stream_in_24_user_V_0_state == 2'd2) & (stream_in_24_user_V_0_vld_in == 1'b1)) | (~((stream_in_24_user_V_0_vld_in == 1'b0) & (stream_in_24_user_V_0_ack_out == 1'b1)) & ~((stream_in_24_user_V_0_ack_out == 1'b0) & (stream_in_24_user_V_0_vld_in == 1'b1)) & (stream_in_24_user_V_0_state == 2'd3)))) begin
            stream_in_24_user_V_0_state <= 2'd3;
        end else begin
            stream_in_24_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_data_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_24_data_1_ack_out == 1'b1) & (stream_out_24_data_1_vld_out == 1'b1))) begin
            stream_out_24_data_1_sel_rd <= ~stream_out_24_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_data_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_24_data_1_ack_in == 1'b1) & (stream_out_24_data_1_vld_in == 1'b1))) begin
            stream_out_24_data_1_sel_wr <= ~stream_out_24_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_data_1_state <= 2'd0;
    end else begin
        if ((((stream_out_24_data_1_state == 2'd2) & (stream_out_24_data_1_vld_in == 1'b0)) | ((stream_out_24_data_1_state == 2'd3) & (stream_out_24_data_1_vld_in == 1'b0) & (stream_out_24_data_1_ack_out == 1'b1)))) begin
            stream_out_24_data_1_state <= 2'd2;
        end else if ((((stream_out_24_data_1_state == 2'd1) & (stream_out_24_data_1_ack_out == 1'b0)) | ((stream_out_24_data_1_state == 2'd3) & (stream_out_24_data_1_ack_out == 1'b0) & (stream_out_24_data_1_vld_in == 1'b1)))) begin
            stream_out_24_data_1_state <= 2'd1;
        end else if (((~((stream_out_24_data_1_vld_in == 1'b0) & (stream_out_24_data_1_ack_out == 1'b1)) & ~((stream_out_24_data_1_ack_out == 1'b0) & (stream_out_24_data_1_vld_in == 1'b1)) & (stream_out_24_data_1_state == 2'd3)) | ((stream_out_24_data_1_state == 2'd1) & (stream_out_24_data_1_ack_out == 1'b1)) | ((stream_out_24_data_1_state == 2'd2) & (stream_out_24_data_1_vld_in == 1'b1)))) begin
            stream_out_24_data_1_state <= 2'd3;
        end else begin
            stream_out_24_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_24_last_V_1_ack_out == 1'b1) & (stream_out_24_last_V_1_vld_out == 1'b1))) begin
            stream_out_24_last_V_1_sel_rd <= ~stream_out_24_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_24_last_V_1_ack_in == 1'b1) & (stream_out_24_last_V_1_vld_in == 1'b1))) begin
            stream_out_24_last_V_1_sel_wr <= ~stream_out_24_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_last_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_24_last_V_1_state == 2'd2) & (stream_out_24_last_V_1_vld_in == 1'b0)) | ((stream_out_24_last_V_1_state == 2'd3) & (stream_out_24_last_V_1_vld_in == 1'b0) & (stream_out_24_last_V_1_ack_out == 1'b1)))) begin
            stream_out_24_last_V_1_state <= 2'd2;
        end else if ((((stream_out_24_last_V_1_state == 2'd1) & (stream_out_24_last_V_1_ack_out == 1'b0)) | ((stream_out_24_last_V_1_state == 2'd3) & (stream_out_24_last_V_1_ack_out == 1'b0) & (stream_out_24_last_V_1_vld_in == 1'b1)))) begin
            stream_out_24_last_V_1_state <= 2'd1;
        end else if (((~((stream_out_24_last_V_1_vld_in == 1'b0) & (stream_out_24_last_V_1_ack_out == 1'b1)) & ~((stream_out_24_last_V_1_ack_out == 1'b0) & (stream_out_24_last_V_1_vld_in == 1'b1)) & (stream_out_24_last_V_1_state == 2'd3)) | ((stream_out_24_last_V_1_state == 2'd1) & (stream_out_24_last_V_1_ack_out == 1'b1)) | ((stream_out_24_last_V_1_state == 2'd2) & (stream_out_24_last_V_1_vld_in == 1'b1)))) begin
            stream_out_24_last_V_1_state <= 2'd3;
        end else begin
            stream_out_24_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_24_user_V_1_ack_out == 1'b1) & (stream_out_24_user_V_1_vld_out == 1'b1))) begin
            stream_out_24_user_V_1_sel_rd <= ~stream_out_24_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_24_user_V_1_ack_in == 1'b1) & (stream_out_24_user_V_1_vld_in == 1'b1))) begin
            stream_out_24_user_V_1_sel_wr <= ~stream_out_24_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_user_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_24_user_V_1_state == 2'd2) & (stream_out_24_user_V_1_vld_in == 1'b0)) | ((stream_out_24_user_V_1_state == 2'd3) & (stream_out_24_user_V_1_vld_in == 1'b0) & (stream_out_24_user_V_1_ack_out == 1'b1)))) begin
            stream_out_24_user_V_1_state <= 2'd2;
        end else if ((((stream_out_24_user_V_1_state == 2'd1) & (stream_out_24_user_V_1_ack_out == 1'b0)) | ((stream_out_24_user_V_1_state == 2'd3) & (stream_out_24_user_V_1_ack_out == 1'b0) & (stream_out_24_user_V_1_vld_in == 1'b1)))) begin
            stream_out_24_user_V_1_state <= 2'd1;
        end else if (((~((stream_out_24_user_V_1_vld_in == 1'b0) & (stream_out_24_user_V_1_ack_out == 1'b1)) & ~((stream_out_24_user_V_1_ack_out == 1'b0) & (stream_out_24_user_V_1_vld_in == 1'b1)) & (stream_out_24_user_V_1_state == 2'd3)) | ((stream_out_24_user_V_1_state == 2'd1) & (stream_out_24_user_V_1_ack_out == 1'b1)) | ((stream_out_24_user_V_1_state == 2'd2) & (stream_out_24_user_V_1_vld_in == 1'b1)))) begin
            stream_out_24_user_V_1_state <= 2'd3;
        end else begin
            stream_out_24_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        Range1_all_ones_1_reg_1079 <= Range1_all_ones_1_fu_510_p2;
        Range1_all_ones_2_reg_1109 <= Range1_all_ones_2_fu_603_p2;
        Range1_all_ones_reg_1049 <= Range1_all_ones_fu_417_p2;
        Range1_all_zeros_1_reg_1085 <= Range1_all_zeros_1_fu_516_p2;
        Range1_all_zeros_2_reg_1115 <= Range1_all_zeros_2_fu_609_p2;
        Range1_all_zeros_reg_1055 <= Range1_all_zeros_fu_423_p2;
        ap_reg_pp0_iter2_bias_c1_V_read_reg_915 <= bias_c1_V_read_reg_915;
        ap_reg_pp0_iter2_bias_c2_V_read_reg_910 <= bias_c2_V_read_reg_910;
        ap_reg_pp0_iter2_bias_c3_V_read_reg_905 <= bias_c3_V_read_reg_905;
        ap_reg_pp0_iter2_c1_c3_V_read_reg_940 <= c1_c3_V_read_reg_940;
        ap_reg_pp0_iter2_c2_c3_V_read_reg_930 <= c2_c3_V_read_reg_930;
        ap_reg_pp0_iter2_c3_c3_V_read_reg_920 <= c3_c3_V_read_reg_920;
        ap_reg_pp0_iter2_loc_V_2_reg_965 <= loc_V_2_reg_965;
        ap_reg_pp0_iter2_stream_in_24_last_V_s_reg_955 <= stream_in_24_last_V_s_reg_955;
        ap_reg_pp0_iter2_stream_in_24_user_V_s_reg_950 <= stream_in_24_user_V_s_reg_950;
        ap_reg_pp0_iter3_bias_c1_V_read_reg_915 <= ap_reg_pp0_iter2_bias_c1_V_read_reg_915;
        ap_reg_pp0_iter3_bias_c2_V_read_reg_910 <= ap_reg_pp0_iter2_bias_c2_V_read_reg_910;
        ap_reg_pp0_iter3_bias_c3_V_read_reg_905 <= ap_reg_pp0_iter2_bias_c3_V_read_reg_905;
        ap_reg_pp0_iter3_stream_in_24_last_V_s_reg_955 <= ap_reg_pp0_iter2_stream_in_24_last_V_s_reg_955;
        ap_reg_pp0_iter3_stream_in_24_user_V_s_reg_950 <= ap_reg_pp0_iter2_stream_in_24_user_V_s_reg_950;
        ap_reg_pp0_iter4_stream_in_24_last_V_s_reg_955 <= ap_reg_pp0_iter3_stream_in_24_last_V_s_reg_955;
        ap_reg_pp0_iter4_stream_in_24_user_V_s_reg_950 <= ap_reg_pp0_iter3_stream_in_24_user_V_s_reg_950;
        carry_1_reg_1073 <= carry_1_fu_494_p2;
        carry_2_reg_1103 <= carry_2_fu_587_p2;
        carry_reg_1043 <= carry_fu_401_p2;
        p_Val2_15_reg_1067 <= p_Val2_15_fu_474_p2;
        p_Val2_23_reg_1097 <= p_Val2_23_fu_567_p2;
        p_Val2_7_reg_1037 <= p_Val2_7_fu_381_p2;
        signbit_1_reg_1060 <= p_Val2_13_fu_440_p2[32'd19];
        signbit_2_reg_1090 <= p_Val2_21_fu_533_p2[32'd19];
        signbit_reg_1030 <= p_Val2_5_fu_347_p2[32'd19];
        tmp_28_reg_1005 <= grp_fu_878_p3[32'd7];
        tmp_32_reg_1015 <= grp_fu_887_p3[32'd7];
        tmp_36_reg_1025 <= grp_fu_896_p3[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if ((((bias_c1_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((bias_c1_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (bias_c1_V_0_vld_reg == 1'b1)))) begin
        bias_c1_V_0_data_reg <= bias_c1_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_c1_V_read_reg_915 <= bias_c1_V_0_data_reg;
        bias_c2_V_read_reg_910 <= bias_c2_V_0_data_reg;
        bias_c3_V_read_reg_905 <= bias_c3_V_0_data_reg;
        c1_c1_V_read_reg_945 <= c1_c1_V_0_data_reg;
        c1_c3_V_read_reg_940 <= c1_c3_V_0_data_reg;
        c2_c1_V_read_reg_935 <= c2_c1_V_0_data_reg;
        c2_c3_V_read_reg_930 <= c2_c3_V_0_data_reg;
        c3_c1_V_read_reg_925 <= c3_c1_V_0_data_reg;
        c3_c3_V_read_reg_920 <= c3_c3_V_0_data_reg;
        loc_V_2_reg_965 <= {{stream_in_24_data_0_data_out[23:16]}};
        loc_V_reg_960 <= loc_V_fu_215_p1;
        p_Val2_16_reg_980 <= p_Val2_16_fu_267_p2;
        p_Val2_1_reg_970 <= p_Val2_1_fu_247_p2;
        p_Val2_9_reg_975 <= p_Val2_9_fu_257_p2;
        stream_in_24_last_V_s_reg_955 <= stream_in_24_last_V_0_data_out;
        stream_in_24_user_V_s_reg_950 <= stream_in_24_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((((bias_c2_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((bias_c2_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (bias_c2_V_0_vld_reg == 1'b1)))) begin
        bias_c2_V_0_data_reg <= bias_c2_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((bias_c3_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((bias_c3_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (bias_c3_V_0_vld_reg == 1'b1)))) begin
        bias_c3_V_0_data_reg <= bias_c3_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c1_c1_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c1_c1_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c1_c1_V_0_vld_reg == 1'b1)))) begin
        c1_c1_V_0_data_reg <= c1_c1_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c1_c2_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c1_c2_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c1_c2_V_0_vld_reg == 1'b1)))) begin
        c1_c2_V_0_data_reg <= c1_c2_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c1_c3_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c1_c3_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c1_c3_V_0_vld_reg == 1'b1)))) begin
        c1_c3_V_0_data_reg <= c1_c3_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c2_c1_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c2_c1_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c2_c1_V_0_vld_reg == 1'b1)))) begin
        c2_c1_V_0_data_reg <= c2_c1_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c2_c2_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c2_c2_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c2_c2_V_0_vld_reg == 1'b1)))) begin
        c2_c2_V_0_data_reg <= c2_c2_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c2_c3_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c2_c3_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c2_c3_V_0_vld_reg == 1'b1)))) begin
        c2_c3_V_0_data_reg <= c2_c3_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c3_c1_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c3_c1_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c3_c1_V_0_vld_reg == 1'b1)))) begin
        c3_c1_V_0_data_reg <= c3_c1_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c3_c2_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c3_c2_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c3_c2_V_0_vld_reg == 1'b1)))) begin
        c3_c2_V_0_data_reg <= c3_c2_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c3_c3_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c3_c3_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c3_c3_V_0_vld_reg == 1'b1)))) begin
        c3_c3_V_0_data_reg <= c3_c3_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_Val2_11_reg_990 <= grp_fu_862_p3;
        p_Val2_19_reg_995 <= grp_fu_870_p3;
        p_Val2_2_reg_985 <= grp_fu_854_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        p_Val2_12_reg_1010 <= grp_fu_887_p3;
        p_Val2_20_reg_1020 <= grp_fu_896_p3;
        p_Val2_4_reg_1000 <= grp_fu_878_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_24_data_0_load_A == 1'b1)) begin
        stream_in_24_data_0_payload_A <= stream_in_24_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_24_data_0_load_B == 1'b1)) begin
        stream_in_24_data_0_payload_B <= stream_in_24_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_24_last_V_0_load_A == 1'b1)) begin
        stream_in_24_last_V_0_payload_A <= stream_in_24_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_24_last_V_0_load_B == 1'b1)) begin
        stream_in_24_last_V_0_payload_B <= stream_in_24_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_24_user_V_0_load_A == 1'b1)) begin
        stream_in_24_user_V_0_payload_A <= stream_in_24_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_24_user_V_0_load_B == 1'b1)) begin
        stream_in_24_user_V_0_payload_B <= stream_in_24_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_data_1_load_A == 1'b1)) begin
        stream_out_24_data_1_payload_A <= stream_out_24_data_t_fu_843_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_data_1_load_B == 1'b1)) begin
        stream_out_24_data_1_payload_B <= stream_out_24_data_t_fu_843_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_last_V_1_load_A == 1'b1)) begin
        stream_out_24_last_V_1_payload_A <= ap_reg_pp0_iter4_stream_in_24_last_V_s_reg_955;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_last_V_1_load_B == 1'b1)) begin
        stream_out_24_last_V_1_payload_B <= ap_reg_pp0_iter4_stream_in_24_last_V_s_reg_955;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_user_V_1_load_A == 1'b1)) begin
        stream_out_24_user_V_1_payload_A <= ap_reg_pp0_iter4_stream_in_24_user_V_s_reg_950;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_user_V_1_load_B == 1'b1)) begin
        stream_out_24_user_V_1_payload_B <= ap_reg_pp0_iter4_stream_in_24_user_V_s_reg_950;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_c1_V_0_ack_out = 1'b1;
    end else begin
        bias_c1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_c2_V_0_ack_out = 1'b1;
    end else begin
        bias_c2_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_c3_V_0_ack_out = 1'b1;
    end else begin
        bias_c3_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c1_c1_V_0_ack_out = 1'b1;
    end else begin
        c1_c1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c1_c2_V_0_ack_out = 1'b1;
    end else begin
        c1_c2_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c1_c3_V_0_ack_out = 1'b1;
    end else begin
        c1_c3_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c2_c1_V_0_ack_out = 1'b1;
    end else begin
        c2_c1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c2_c2_V_0_ack_out = 1'b1;
    end else begin
        c2_c2_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c2_c3_V_0_ack_out = 1'b1;
    end else begin
        c2_c3_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c3_c1_V_0_ack_out = 1'b1;
    end else begin
        c3_c1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c3_c2_V_0_ack_out = 1'b1;
    end else begin
        c3_c2_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c3_c3_V_0_ack_out = 1'b1;
    end else begin
        c3_c3_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_24_TDATA_blk_n = stream_in_24_data_0_state[1'd0];
    end else begin
        stream_in_24_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_24_data_0_ack_out = 1'b1;
    end else begin
        stream_in_24_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_24_data_0_sel == 1'b1)) begin
        stream_in_24_data_0_data_out = stream_in_24_data_0_payload_B;
    end else begin
        stream_in_24_data_0_data_out = stream_in_24_data_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_24_last_V_0_ack_out = 1'b1;
    end else begin
        stream_in_24_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_24_last_V_0_sel == 1'b1)) begin
        stream_in_24_last_V_0_data_out = stream_in_24_last_V_0_payload_B;
    end else begin
        stream_in_24_last_V_0_data_out = stream_in_24_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_24_user_V_0_ack_out = 1'b1;
    end else begin
        stream_in_24_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_24_user_V_0_sel == 1'b1)) begin
        stream_in_24_user_V_0_data_out = stream_in_24_user_V_0_payload_B;
    end else begin
        stream_in_24_user_V_0_data_out = stream_in_24_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
        stream_out_24_TDATA_blk_n = stream_out_24_data_1_state[1'd1];
    end else begin
        stream_out_24_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((stream_out_24_data_1_sel == 1'b1)) begin
        stream_out_24_data_1_data_out = stream_out_24_data_1_payload_B;
    end else begin
        stream_out_24_data_1_data_out = stream_out_24_data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        stream_out_24_data_1_vld_in = 1'b1;
    end else begin
        stream_out_24_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_24_last_V_1_sel == 1'b1)) begin
        stream_out_24_last_V_1_data_out = stream_out_24_last_V_1_payload_B;
    end else begin
        stream_out_24_last_V_1_data_out = stream_out_24_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        stream_out_24_last_V_1_vld_in = 1'b1;
    end else begin
        stream_out_24_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_24_user_V_1_sel == 1'b1)) begin
        stream_out_24_user_V_1_data_out = stream_out_24_user_V_1_payload_B;
    end else begin
        stream_out_24_user_V_1_data_out = stream_out_24_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        stream_out_24_user_V_1_vld_in = 1'b1;
    end else begin
        stream_out_24_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_1_fu_239_p1 = loc_V_1_fu_219_p4;

assign OP1_V_2_fu_294_p1 = ap_reg_pp0_iter2_loc_V_2_reg_965;

assign OP1_V_fu_273_p1 = loc_V_reg_960;

assign Range1_all_ones_1_fu_510_p2 = ((tmp_15_fu_500_p4 == 4'd15) ? 1'b1 : 1'b0);

assign Range1_all_ones_2_fu_603_p2 = ((tmp_24_fu_593_p4 == 4'd15) ? 1'b1 : 1'b0);

assign Range1_all_ones_fu_417_p2 = ((tmp_2_fu_407_p4 == 4'd15) ? 1'b1 : 1'b0);

assign Range1_all_zeros_1_fu_516_p2 = ((tmp_15_fu_500_p4 == 4'd0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_2_fu_609_p2 = ((tmp_24_fu_593_p4 == 4'd0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_423_p2 = ((tmp_2_fu_407_p4 == 4'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & ((stream_out_24_last_V_1_ack_in == 1'b0) | (stream_out_24_user_V_1_ack_in == 1'b0) | (stream_out_24_data_1_ack_in == 1'b0))) | ((stream_in_24_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & ((stream_out_24_last_V_1_ack_in == 1'b0) | (stream_out_24_user_V_1_ack_in == 1'b0) | (stream_out_24_data_1_ack_in == 1'b0))) | ((stream_out_24_data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((stream_in_24_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter6 == 1'b1) & ((stream_out_24_last_V_1_ack_in == 1'b0) | (stream_out_24_user_V_1_ack_in == 1'b0) | (stream_out_24_data_1_ack_in == 1'b0))) | ((stream_out_24_data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((stream_in_24_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (stream_in_24_data_0_vld_out == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter6 = ((stream_out_24_last_V_1_ack_in == 1'b0) | (stream_out_24_user_V_1_ack_in == 1'b0) | (stream_out_24_data_1_ack_in == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_control_inv = ~ap_rst_n_control;
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign brmerge1_fu_739_p2 = (p_39_demorgan_i461_no_fu_733_p2 | neg_src_not_fu_721_p2);

assign brmerge2_fu_815_p2 = (p_39_demorgan_i482_no_fu_809_p2 | neg_src_6_not_fu_797_p2);

assign brmerge_fu_663_p2 = (p_39_demorgan_i_not_fu_657_p2 | neg_src_5_not_fu_645_p2);

assign brmerge_i_i463_not_fu_727_p2 = (p_39_demorgan_i1_fu_711_p2 & neg_src_not_fu_721_p2);

assign brmerge_i_i484_not_fu_803_p2 = (p_39_demorgan_i2_fu_787_p2 & neg_src_6_not_fu_797_p2);

assign brmerge_i_i_not_fu_651_p2 = (p_39_demorgan_i_fu_635_p2 & neg_src_5_not_fu_645_p2);

assign carry_1_fu_494_p2 = (tmp_33_fu_466_p3 & tmp_14_fu_488_p2);

assign carry_2_fu_587_p2 = (tmp_37_fu_559_p3 & tmp_23_fu_581_p2);

assign carry_fu_401_p2 = (tmp_5_fu_395_p2 & tmp_29_fu_373_p3);

assign deleted_zeros_1_fu_691_p3 = ((carry_1_reg_1073[0:0] === 1'b1) ? Range1_all_ones_1_reg_1079 : Range1_all_zeros_1_reg_1085);

assign deleted_zeros_2_fu_767_p3 = ((carry_2_reg_1103[0:0] === 1'b1) ? Range1_all_ones_2_reg_1109 : Range1_all_zeros_2_reg_1115);

assign deleted_zeros_fu_615_p3 = ((carry_reg_1043[0:0] === 1'b1) ? Range1_all_ones_reg_1049 : Range1_all_zeros_reg_1055);

assign grp_fu_854_p0 = OP1_V_fu_273_p1;

assign grp_fu_862_p0 = OP1_V_fu_273_p1;

assign grp_fu_870_p0 = OP1_V_fu_273_p1;

assign grp_fu_878_p0 = OP1_V_2_fu_294_p1;

assign grp_fu_887_p0 = OP1_V_2_fu_294_p1;

assign grp_fu_896_p0 = OP1_V_2_fu_294_p1;

assign loc_V_1_fu_219_p4 = {{stream_in_24_data_0_data_out[15:8]}};

assign loc_V_fu_215_p1 = stream_in_24_data_0_data_out[7:0];

assign neg_src_5_not_fu_645_p2 = (signbit_not_fu_640_p2 | p_38_i_fu_620_p2);

assign neg_src_6_fu_706_p2 = (tmp_16_fu_700_p2 & signbit_1_reg_1060);

assign neg_src_6_not_fu_797_p2 = (signbit_2_not_fu_792_p2 | p_38_i2_fu_772_p2);

assign neg_src_7_fu_782_p2 = (tmp_25_fu_776_p2 & signbit_2_reg_1090);

assign neg_src_fu_630_p2 = (tmp_8_fu_624_p2 & signbit_reg_1030);

assign neg_src_not_fu_721_p2 = (signbit_1_not_fu_716_p2 | p_38_i1_fu_696_p2);

assign out1_V_fu_683_p3 = ((brmerge_fu_663_p2[0:0] === 1'b1) ? p_mux_fu_669_p3 : p_s_fu_676_p3);

assign out2_V_fu_759_p3 = ((brmerge1_fu_739_p2[0:0] === 1'b1) ? p_mux1_fu_745_p3 : p_1_fu_752_p3);

assign out3_V_fu_835_p3 = ((brmerge2_fu_815_p2[0:0] === 1'b1) ? p_mux2_fu_821_p3 : p_2_fu_828_p3);

assign p_1_fu_752_p3 = ((neg_src_6_fu_706_p2[0:0] === 1'b1) ? 8'd0 : p_Val2_15_reg_1067);

assign p_2_fu_828_p3 = ((neg_src_7_fu_782_p2[0:0] === 1'b1) ? 8'd0 : p_Val2_23_reg_1097);

assign p_38_i1_fu_696_p2 = (carry_1_reg_1073 & Range1_all_ones_1_reg_1079);

assign p_38_i2_fu_772_p2 = (carry_2_reg_1103 & Range1_all_ones_2_reg_1109);

assign p_38_i_fu_620_p2 = (carry_reg_1043 & Range1_all_ones_reg_1049);

assign p_39_demorgan_i1_fu_711_p2 = (signbit_1_reg_1060 | deleted_zeros_1_fu_691_p3);

assign p_39_demorgan_i2_fu_787_p2 = (signbit_2_reg_1090 | deleted_zeros_2_fu_767_p3);

assign p_39_demorgan_i461_no_fu_733_p2 = (p_39_demorgan_i1_fu_711_p2 ^ 1'd1);

assign p_39_demorgan_i482_no_fu_809_p2 = (p_39_demorgan_i2_fu_787_p2 ^ 1'd1);

assign p_39_demorgan_i_fu_635_p2 = (signbit_reg_1030 | deleted_zeros_fu_615_p3);

assign p_39_demorgan_i_not_fu_657_p2 = (p_39_demorgan_i_fu_635_p2 ^ 1'd1);

assign p_Val2_13_fu_440_p2 = ($signed(p_Val2_12_reg_1010) + $signed(tmp_16_cast_fu_436_p1));

assign p_Val2_14_fu_453_p4 = {{p_Val2_13_fu_440_p2[15:8]}};

assign p_Val2_15_fu_474_p2 = (tmp_13_fu_463_p1 + p_Val2_14_fu_453_p4);

assign p_Val2_16_fu_267_p0 = OP1_V_1_fu_239_p1;

assign p_Val2_16_fu_267_p1 = c3_c2_V_0_data_reg;

assign p_Val2_16_fu_267_p2 = ($signed({{1'b0}, {p_Val2_16_fu_267_p0}}) * $signed(p_Val2_16_fu_267_p1));

assign p_Val2_1_fu_247_p0 = OP1_V_1_fu_239_p1;

assign p_Val2_1_fu_247_p1 = c1_c2_V_0_data_reg;

assign p_Val2_1_fu_247_p2 = ($signed({{1'b0}, {p_Val2_1_fu_247_p0}}) * $signed(p_Val2_1_fu_247_p1));

assign p_Val2_21_fu_533_p2 = ($signed(p_Val2_20_reg_1020) + $signed(tmp_27_cast_fu_529_p1));

assign p_Val2_22_fu_546_p4 = {{p_Val2_21_fu_533_p2[15:8]}};

assign p_Val2_23_fu_567_p2 = (tmp_22_fu_556_p1 + p_Val2_22_fu_546_p4);

assign p_Val2_5_fu_347_p2 = ($signed(p_Val2_4_reg_1000) + $signed(tmp_3_cast_fu_343_p1));

assign p_Val2_6_fu_360_p4 = {{p_Val2_5_fu_347_p2[15:8]}};

assign p_Val2_7_fu_381_p2 = (tmp_7_fu_370_p1 + p_Val2_6_fu_360_p4);

assign p_Val2_9_fu_257_p0 = OP1_V_1_fu_239_p1;

assign p_Val2_9_fu_257_p1 = c2_c2_V_0_data_reg;

assign p_Val2_9_fu_257_p2 = ($signed({{1'b0}, {p_Val2_9_fu_257_p0}}) * $signed(p_Val2_9_fu_257_p1));

assign p_mux1_fu_745_p3 = ((brmerge_i_i463_not_fu_727_p2[0:0] === 1'b1) ? p_Val2_15_reg_1067 : 8'd255);

assign p_mux2_fu_821_p3 = ((brmerge_i_i484_not_fu_803_p2[0:0] === 1'b1) ? p_Val2_23_reg_1097 : 8'd255);

assign p_mux_fu_669_p3 = ((brmerge_i_i_not_fu_651_p2[0:0] === 1'b1) ? p_Val2_7_reg_1037 : 8'd255);

assign p_s_fu_676_p3 = ((neg_src_fu_630_p2[0:0] === 1'b1) ? 8'd0 : p_Val2_7_reg_1037);

assign signbit_1_not_fu_716_p2 = (signbit_1_reg_1060 ^ 1'd1);

assign signbit_2_not_fu_792_p2 = (signbit_2_reg_1090 ^ 1'd1);

assign signbit_not_fu_640_p2 = (signbit_reg_1030 ^ 1'd1);

assign stream_in_24_TREADY = stream_in_24_last_V_0_state[1'd1];

assign stream_in_24_data_0_ack_in = stream_in_24_data_0_state[1'd1];

assign stream_in_24_data_0_load_A = (stream_in_24_data_0_state_cmp_full & ~stream_in_24_data_0_sel_wr);

assign stream_in_24_data_0_load_B = (stream_in_24_data_0_state_cmp_full & stream_in_24_data_0_sel_wr);

assign stream_in_24_data_0_sel = stream_in_24_data_0_sel_rd;

assign stream_in_24_data_0_state_cmp_full = ((stream_in_24_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_24_data_0_vld_in = stream_in_24_TVALID;

assign stream_in_24_data_0_vld_out = stream_in_24_data_0_state[1'd0];

assign stream_in_24_last_V_0_ack_in = stream_in_24_last_V_0_state[1'd1];

assign stream_in_24_last_V_0_load_A = (stream_in_24_last_V_0_state_cmp_full & ~stream_in_24_last_V_0_sel_wr);

assign stream_in_24_last_V_0_load_B = (stream_in_24_last_V_0_state_cmp_full & stream_in_24_last_V_0_sel_wr);

assign stream_in_24_last_V_0_sel = stream_in_24_last_V_0_sel_rd;

assign stream_in_24_last_V_0_state_cmp_full = ((stream_in_24_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_24_last_V_0_vld_in = stream_in_24_TVALID;

assign stream_in_24_last_V_0_vld_out = stream_in_24_last_V_0_state[1'd0];

assign stream_in_24_user_V_0_ack_in = stream_in_24_user_V_0_state[1'd1];

assign stream_in_24_user_V_0_load_A = (stream_in_24_user_V_0_state_cmp_full & ~stream_in_24_user_V_0_sel_wr);

assign stream_in_24_user_V_0_load_B = (stream_in_24_user_V_0_state_cmp_full & stream_in_24_user_V_0_sel_wr);

assign stream_in_24_user_V_0_sel = stream_in_24_user_V_0_sel_rd;

assign stream_in_24_user_V_0_state_cmp_full = ((stream_in_24_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_24_user_V_0_vld_in = stream_in_24_TVALID;

assign stream_in_24_user_V_0_vld_out = stream_in_24_user_V_0_state[1'd0];

assign stream_out_24_TDATA = stream_out_24_data_1_data_out;

assign stream_out_24_TLAST = stream_out_24_last_V_1_data_out;

assign stream_out_24_TUSER = stream_out_24_user_V_1_data_out;

assign stream_out_24_TVALID = stream_out_24_last_V_1_state[1'd0];

assign stream_out_24_data_1_ack_in = stream_out_24_data_1_state[1'd1];

assign stream_out_24_data_1_ack_out = stream_out_24_TREADY;

assign stream_out_24_data_1_load_A = (stream_out_24_data_1_state_cmp_full & ~stream_out_24_data_1_sel_wr);

assign stream_out_24_data_1_load_B = (stream_out_24_data_1_state_cmp_full & stream_out_24_data_1_sel_wr);

assign stream_out_24_data_1_sel = stream_out_24_data_1_sel_rd;

assign stream_out_24_data_1_state_cmp_full = ((stream_out_24_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_24_data_1_vld_out = stream_out_24_data_1_state[1'd0];

assign stream_out_24_data_t_fu_843_p4 = {{{out3_V_fu_835_p3}, {out2_V_fu_759_p3}}, {out1_V_fu_683_p3}};

assign stream_out_24_last_V_1_ack_in = stream_out_24_last_V_1_state[1'd1];

assign stream_out_24_last_V_1_ack_out = stream_out_24_TREADY;

assign stream_out_24_last_V_1_load_A = (stream_out_24_last_V_1_state_cmp_full & ~stream_out_24_last_V_1_sel_wr);

assign stream_out_24_last_V_1_load_B = (stream_out_24_last_V_1_state_cmp_full & stream_out_24_last_V_1_sel_wr);

assign stream_out_24_last_V_1_sel = stream_out_24_last_V_1_sel_rd;

assign stream_out_24_last_V_1_state_cmp_full = ((stream_out_24_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_24_last_V_1_vld_out = stream_out_24_last_V_1_state[1'd0];

assign stream_out_24_user_V_1_ack_in = stream_out_24_user_V_1_state[1'd1];

assign stream_out_24_user_V_1_ack_out = stream_out_24_TREADY;

assign stream_out_24_user_V_1_load_A = (stream_out_24_user_V_1_state_cmp_full & ~stream_out_24_user_V_1_sel_wr);

assign stream_out_24_user_V_1_load_B = (stream_out_24_user_V_1_state_cmp_full & stream_out_24_user_V_1_sel_wr);

assign stream_out_24_user_V_1_sel = stream_out_24_user_V_1_sel_rd;

assign stream_out_24_user_V_1_state_cmp_full = ((stream_out_24_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_24_user_V_1_vld_out = stream_out_24_user_V_1_state[1'd0];

assign tmp_12_fu_429_p3 = {{ap_reg_pp0_iter3_bias_c2_V_read_reg_910}, {8'd0}};

assign tmp_13_fu_463_p1 = tmp_32_reg_1015;

assign tmp_14_fu_488_p2 = (tmp_34_fu_480_p3 ^ 1'd1);

assign tmp_15_fu_500_p4 = {{p_Val2_13_fu_440_p2[19:16]}};

assign tmp_16_cast_fu_436_p1 = $signed(tmp_12_fu_429_p3);

assign tmp_16_fu_700_p2 = (p_38_i1_fu_696_p2 ^ 1'd1);

assign tmp_21_fu_522_p3 = {{ap_reg_pp0_iter3_bias_c3_V_read_reg_905}, {8'd0}};

assign tmp_22_fu_556_p1 = tmp_36_reg_1025;

assign tmp_23_fu_581_p2 = (tmp_38_fu_573_p3 ^ 1'd1);

assign tmp_24_fu_593_p4 = {{p_Val2_21_fu_533_p2[19:16]}};

assign tmp_25_fu_776_p2 = (p_38_i2_fu_772_p2 ^ 1'd1);

assign tmp_27_cast_fu_529_p1 = $signed(tmp_21_fu_522_p3);

assign tmp_29_fu_373_p3 = p_Val2_5_fu_347_p2[32'd15];

assign tmp_2_fu_407_p4 = {{p_Val2_5_fu_347_p2[19:16]}};

assign tmp_30_fu_387_p3 = p_Val2_7_fu_381_p2[32'd7];

assign tmp_33_fu_466_p3 = p_Val2_13_fu_440_p2[32'd15];

assign tmp_34_fu_480_p3 = p_Val2_15_fu_474_p2[32'd7];

assign tmp_37_fu_559_p3 = p_Val2_21_fu_533_p2[32'd15];

assign tmp_38_fu_573_p3 = p_Val2_23_fu_567_p2[32'd7];

assign tmp_3_cast_fu_343_p1 = $signed(tmp_3_fu_336_p3);

assign tmp_3_fu_336_p3 = {{ap_reg_pp0_iter3_bias_c1_V_read_reg_915}, {8'd0}};

assign tmp_5_fu_395_p2 = (tmp_30_fu_387_p3 ^ 1'd1);

assign tmp_7_fu_370_p1 = tmp_28_reg_1005;

assign tmp_8_fu_624_p2 = (p_38_i_fu_620_p2 ^ 1'd1);

endmodule //color_convert
